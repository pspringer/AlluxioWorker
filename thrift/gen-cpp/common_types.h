/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef common_TYPES_H
#define common_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>




struct CommandType {
  enum type {
    Unknown = 0,
    Nothing = 1,
    Register = 2,
    Free = 3,
    Delete = 4,
    Persist = 5
  };
};

extern const std::map<int, const char*> _CommandType_VALUES_TO_NAMES;

struct TTtlAction {
  enum type {
    Delete = 0,
    Free = 1
  };
};

extern const std::map<int, const char*> _TTtlAction_VALUES_TO_NAMES;

class BlockInfo;

class BlockLocation;

class Command;

class WorkerNetAddress;

class RpcOptions;

typedef struct _BlockInfo__isset {
  _BlockInfo__isset() : blockId(false), length(false), locations(false) {}
  bool blockId :1;
  bool length :1;
  bool locations :1;
} _BlockInfo__isset;

class BlockInfo : public virtual ::apache::thrift::TBase {
 public:

  BlockInfo(const BlockInfo&);
  BlockInfo& operator=(const BlockInfo&);
  BlockInfo() : blockId(0), length(0) {
  }

  virtual ~BlockInfo() throw();
  int64_t blockId;
  int64_t length;
  std::vector<BlockLocation>  locations;

  _BlockInfo__isset __isset;

  void __set_blockId(const int64_t val);

  void __set_length(const int64_t val);

  void __set_locations(const std::vector<BlockLocation> & val);

  bool operator == (const BlockInfo & rhs) const
  {
    if (!(blockId == rhs.blockId))
      return false;
    if (!(length == rhs.length))
      return false;
    if (!(locations == rhs.locations))
      return false;
    return true;
  }
  bool operator != (const BlockInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BlockInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(BlockInfo &a, BlockInfo &b);

inline std::ostream& operator<<(std::ostream& out, const BlockInfo& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _BlockLocation__isset {
  _BlockLocation__isset() : workerId(false), workerAddress(false), tierAlias(false) {}
  bool workerId :1;
  bool workerAddress :1;
  bool tierAlias :1;
} _BlockLocation__isset;

class BlockLocation : public virtual ::apache::thrift::TBase {
 public:

  BlockLocation(const BlockLocation&);
  BlockLocation& operator=(const BlockLocation&);
  BlockLocation() : workerId(0), tierAlias() {
  }

  virtual ~BlockLocation() throw();
  int64_t workerId;
  WorkerNetAddress workerAddress;
  std::string tierAlias;

  _BlockLocation__isset __isset;

  void __set_workerId(const int64_t val);

  void __set_workerAddress(const WorkerNetAddress& val);

  void __set_tierAlias(const std::string& val);

  bool operator == (const BlockLocation & rhs) const
  {
    if (!(workerId == rhs.workerId))
      return false;
    if (!(workerAddress == rhs.workerAddress))
      return false;
    if (!(tierAlias == rhs.tierAlias))
      return false;
    return true;
  }
  bool operator != (const BlockLocation &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BlockLocation & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(BlockLocation &a, BlockLocation &b);

inline std::ostream& operator<<(std::ostream& out, const BlockLocation& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _Command__isset {
  _Command__isset() : commandType(false), data(false) {}
  bool commandType :1;
  bool data :1;
} _Command__isset;

class Command : public virtual ::apache::thrift::TBase {
 public:

  Command(const Command&);
  Command& operator=(const Command&);
  Command() : commandType((CommandType::type)0) {
  }

  virtual ~Command() throw();
  CommandType::type commandType;
  std::vector<int64_t>  data;

  _Command__isset __isset;

  void __set_commandType(const CommandType::type val);

  void __set_data(const std::vector<int64_t> & val);

  bool operator == (const Command & rhs) const
  {
    if (!(commandType == rhs.commandType))
      return false;
    if (!(data == rhs.data))
      return false;
    return true;
  }
  bool operator != (const Command &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Command & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Command &a, Command &b);

inline std::ostream& operator<<(std::ostream& out, const Command& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _WorkerNetAddress__isset {
  _WorkerNetAddress__isset() : host(false), rpcPort(false), dataPort(false), webPort(false) {}
  bool host :1;
  bool rpcPort :1;
  bool dataPort :1;
  bool webPort :1;
} _WorkerNetAddress__isset;

class WorkerNetAddress : public virtual ::apache::thrift::TBase {
 public:

  WorkerNetAddress(const WorkerNetAddress&);
  WorkerNetAddress& operator=(const WorkerNetAddress&);
  WorkerNetAddress() : host(), rpcPort(0), dataPort(0), webPort(0) {
  }

  virtual ~WorkerNetAddress() throw();
  std::string host;
  int32_t rpcPort;
  int32_t dataPort;
  int32_t webPort;

  _WorkerNetAddress__isset __isset;

  void __set_host(const std::string& val);

  void __set_rpcPort(const int32_t val);

  void __set_dataPort(const int32_t val);

  void __set_webPort(const int32_t val);

  bool operator == (const WorkerNetAddress & rhs) const
  {
    if (!(host == rhs.host))
      return false;
    if (!(rpcPort == rhs.rpcPort))
      return false;
    if (!(dataPort == rhs.dataPort))
      return false;
    if (!(webPort == rhs.webPort))
      return false;
    return true;
  }
  bool operator != (const WorkerNetAddress &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const WorkerNetAddress & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(WorkerNetAddress &a, WorkerNetAddress &b);

inline std::ostream& operator<<(std::ostream& out, const WorkerNetAddress& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _RpcOptions__isset {
  _RpcOptions__isset() : key(false) {}
  bool key :1;
} _RpcOptions__isset;

class RpcOptions : public virtual ::apache::thrift::TBase {
 public:

  RpcOptions(const RpcOptions&);
  RpcOptions& operator=(const RpcOptions&);
  RpcOptions() : key() {
  }

  virtual ~RpcOptions() throw();
  std::string key;

  _RpcOptions__isset __isset;

  void __set_key(const std::string& val);

  bool operator == (const RpcOptions & rhs) const
  {
    if (__isset.key != rhs.__isset.key)
      return false;
    else if (__isset.key && !(key == rhs.key))
      return false;
    return true;
  }
  bool operator != (const RpcOptions &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RpcOptions & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(RpcOptions &a, RpcOptions &b);

inline std::ostream& operator<<(std::ostream& out, const RpcOptions& obj)
{
  obj.printTo(out);
  return out;
}



#endif
