/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "block_master_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>




WorkerInfo::~WorkerInfo() throw() {
}


void WorkerInfo::__set_id(const int64_t val) {
  this->id = val;
}

void WorkerInfo::__set_address(const  ::WorkerNetAddress& val) {
  this->address = val;
}

void WorkerInfo::__set_lastContactSec(const int32_t val) {
  this->lastContactSec = val;
}

void WorkerInfo::__set_state(const std::string& val) {
  this->state = val;
}

void WorkerInfo::__set_capacityBytes(const int64_t val) {
  this->capacityBytes = val;
}

void WorkerInfo::__set_usedBytes(const int64_t val) {
  this->usedBytes = val;
}

void WorkerInfo::__set_startTimeMs(const int64_t val) {
  this->startTimeMs = val;
}

uint32_t WorkerInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->address.read(iprot);
          this->__isset.address = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->lastContactSec);
          this->__isset.lastContactSec = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->state);
          this->__isset.state = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->capacityBytes);
          this->__isset.capacityBytes = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->usedBytes);
          this->__isset.usedBytes = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->startTimeMs);
          this->__isset.startTimeMs = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t WorkerInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("WorkerInfo");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("address", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->address.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("lastContactSec", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->lastContactSec);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("state", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->state);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("capacityBytes", ::apache::thrift::protocol::T_I64, 5);
  xfer += oprot->writeI64(this->capacityBytes);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("usedBytes", ::apache::thrift::protocol::T_I64, 6);
  xfer += oprot->writeI64(this->usedBytes);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("startTimeMs", ::apache::thrift::protocol::T_I64, 7);
  xfer += oprot->writeI64(this->startTimeMs);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(WorkerInfo &a, WorkerInfo &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.address, b.address);
  swap(a.lastContactSec, b.lastContactSec);
  swap(a.state, b.state);
  swap(a.capacityBytes, b.capacityBytes);
  swap(a.usedBytes, b.usedBytes);
  swap(a.startTimeMs, b.startTimeMs);
  swap(a.__isset, b.__isset);
}

WorkerInfo::WorkerInfo(const WorkerInfo& other0) {
  id = other0.id;
  address = other0.address;
  lastContactSec = other0.lastContactSec;
  state = other0.state;
  capacityBytes = other0.capacityBytes;
  usedBytes = other0.usedBytes;
  startTimeMs = other0.startTimeMs;
  __isset = other0.__isset;
}
WorkerInfo& WorkerInfo::operator=(const WorkerInfo& other1) {
  id = other1.id;
  address = other1.address;
  lastContactSec = other1.lastContactSec;
  state = other1.state;
  capacityBytes = other1.capacityBytes;
  usedBytes = other1.usedBytes;
  startTimeMs = other1.startTimeMs;
  __isset = other1.__isset;
  return *this;
}
void WorkerInfo::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "WorkerInfo(";
  out << "id=" << to_string(id);
  out << ", " << "address=" << to_string(address);
  out << ", " << "lastContactSec=" << to_string(lastContactSec);
  out << ", " << "state=" << to_string(state);
  out << ", " << "capacityBytes=" << to_string(capacityBytes);
  out << ", " << "usedBytes=" << to_string(usedBytes);
  out << ", " << "startTimeMs=" << to_string(startTimeMs);
  out << ")";
}


