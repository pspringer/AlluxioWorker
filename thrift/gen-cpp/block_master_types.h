/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef block_master_TYPES_H
#define block_master_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>
#include "common_types.h"
#include "exception_types.h"




class WorkerInfo;

typedef struct _WorkerInfo__isset {
  _WorkerInfo__isset() : id(false), address(false), lastContactSec(false), state(false), capacityBytes(false), usedBytes(false), startTimeMs(false) {}
  bool id :1;
  bool address :1;
  bool lastContactSec :1;
  bool state :1;
  bool capacityBytes :1;
  bool usedBytes :1;
  bool startTimeMs :1;
} _WorkerInfo__isset;

class WorkerInfo : public virtual ::apache::thrift::TBase {
 public:

  WorkerInfo(const WorkerInfo&);
  WorkerInfo& operator=(const WorkerInfo&);
  WorkerInfo() : id(0), lastContactSec(0), state(), capacityBytes(0), usedBytes(0), startTimeMs(0) {
  }

  virtual ~WorkerInfo() throw();
  int64_t id;
   ::WorkerNetAddress address;
  int32_t lastContactSec;
  std::string state;
  int64_t capacityBytes;
  int64_t usedBytes;
  int64_t startTimeMs;

  _WorkerInfo__isset __isset;

  void __set_id(const int64_t val);

  void __set_address(const  ::WorkerNetAddress& val);

  void __set_lastContactSec(const int32_t val);

  void __set_state(const std::string& val);

  void __set_capacityBytes(const int64_t val);

  void __set_usedBytes(const int64_t val);

  void __set_startTimeMs(const int64_t val);

  bool operator == (const WorkerInfo & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(address == rhs.address))
      return false;
    if (!(lastContactSec == rhs.lastContactSec))
      return false;
    if (!(state == rhs.state))
      return false;
    if (!(capacityBytes == rhs.capacityBytes))
      return false;
    if (!(usedBytes == rhs.usedBytes))
      return false;
    if (!(startTimeMs == rhs.startTimeMs))
      return false;
    return true;
  }
  bool operator != (const WorkerInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const WorkerInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(WorkerInfo &a, WorkerInfo &b);

inline std::ostream& operator<<(std::ostream& out, const WorkerInfo& obj)
{
  obj.printTo(out);
  return out;
}



#endif
