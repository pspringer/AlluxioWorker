/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef BlockMasterWorkerService_H
#define BlockMasterWorkerService_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "block_master_types.h"
#include "AlluxioService.h"



#ifdef _WIN32
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class BlockMasterWorkerServiceIf : virtual public  ::AlluxioServiceIf {
 public:
  virtual ~BlockMasterWorkerServiceIf() {}

  /**
   * Marks the given block as committed.
   * 
   * @param workerId the id of the worker
   * 
   * @param usedBytesOnTier the space used in bytes on the target tier
   * 
   * @param tierAlias the alias of the target tier
   * 
   * @param blockId the id of the block being committed
   * 
   * @param length the length of the block being committed
   */
  virtual void commitBlock(const int64_t workerId, const int64_t usedBytesOnTier, const std::string& tierAlias, const int64_t blockId, const int64_t length) = 0;

  /**
   * Returns a worker id for the given network address.
   * 
   * @param workerNetAddress the worker network address
   */
  virtual int64_t getWorkerId(const  ::WorkerNetAddress& workerNetAddress) = 0;

  /**
   * Periodic worker heartbeat returns an optional command for the worker to execute.
   * 
   * @param workerId the id of the worker
   * 
   * @param usedBytesOnTiers the map of space used in bytes on all tiers
   * 
   * @param removedBlockIds the list of removed block ids
   * 
   * @param addedBlocksOnTiers the map of added blocks on all tiers
   */
  virtual void heartbeat( ::Command& _return, const int64_t workerId, const std::map<std::string, int64_t> & usedBytesOnTiers, const std::vector<int64_t> & removedBlockIds, const std::map<std::string, std::vector<int64_t> > & addedBlocksOnTiers) = 0;

  /**
   * Registers a worker.
   * 
   * @param workerId the id of the worker
   * 
   * @param storageTiers the list of storage tiers
   * 
   * @param totalBytesOnTiers the map of total bytes on each tier
   * 
   * @param usedBytesOnTiers the map of used bytes on each tier
   * 
   * @param currentBlocksOnTiers the map of list of blocks on each tier
   */
  virtual void registerWorker(const int64_t workerId, const std::vector<std::string> & storageTiers, const std::map<std::string, int64_t> & totalBytesOnTiers, const std::map<std::string, int64_t> & usedBytesOnTiers, const std::map<std::string, std::vector<int64_t> > & currentBlocksOnTiers) = 0;
};

class BlockMasterWorkerServiceIfFactory : virtual public  ::AlluxioServiceIfFactory {
 public:
  typedef BlockMasterWorkerServiceIf Handler;

  virtual ~BlockMasterWorkerServiceIfFactory() {}

  virtual BlockMasterWorkerServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler( ::AlluxioServiceIf* /* handler */) = 0;
};

class BlockMasterWorkerServiceIfSingletonFactory : virtual public BlockMasterWorkerServiceIfFactory {
 public:
  BlockMasterWorkerServiceIfSingletonFactory(const boost::shared_ptr<BlockMasterWorkerServiceIf>& iface) : iface_(iface) {}
  virtual ~BlockMasterWorkerServiceIfSingletonFactory() {}

  virtual BlockMasterWorkerServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler( ::AlluxioServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<BlockMasterWorkerServiceIf> iface_;
};

class BlockMasterWorkerServiceNull : virtual public BlockMasterWorkerServiceIf , virtual public  ::AlluxioServiceNull {
 public:
  virtual ~BlockMasterWorkerServiceNull() {}
  void commitBlock(const int64_t /* workerId */, const int64_t /* usedBytesOnTier */, const std::string& /* tierAlias */, const int64_t /* blockId */, const int64_t /* length */) {
    return;
  }
  int64_t getWorkerId(const  ::WorkerNetAddress& /* workerNetAddress */) {
    int64_t _return = 0;
    return _return;
  }
  void heartbeat( ::Command& /* _return */, const int64_t /* workerId */, const std::map<std::string, int64_t> & /* usedBytesOnTiers */, const std::vector<int64_t> & /* removedBlockIds */, const std::map<std::string, std::vector<int64_t> > & /* addedBlocksOnTiers */) {
    return;
  }
  void registerWorker(const int64_t /* workerId */, const std::vector<std::string> & /* storageTiers */, const std::map<std::string, int64_t> & /* totalBytesOnTiers */, const std::map<std::string, int64_t> & /* usedBytesOnTiers */, const std::map<std::string, std::vector<int64_t> > & /* currentBlocksOnTiers */) {
    return;
  }
};

typedef struct _BlockMasterWorkerService_commitBlock_args__isset {
  _BlockMasterWorkerService_commitBlock_args__isset() : workerId(false), usedBytesOnTier(false), tierAlias(false), blockId(false), length(false) {}
  bool workerId :1;
  bool usedBytesOnTier :1;
  bool tierAlias :1;
  bool blockId :1;
  bool length :1;
} _BlockMasterWorkerService_commitBlock_args__isset;

class BlockMasterWorkerService_commitBlock_args {
 public:

  BlockMasterWorkerService_commitBlock_args(const BlockMasterWorkerService_commitBlock_args&);
  BlockMasterWorkerService_commitBlock_args& operator=(const BlockMasterWorkerService_commitBlock_args&);
  BlockMasterWorkerService_commitBlock_args() : workerId(0), usedBytesOnTier(0), tierAlias(), blockId(0), length(0) {
  }

  virtual ~BlockMasterWorkerService_commitBlock_args() throw();
  int64_t workerId;
  int64_t usedBytesOnTier;
  std::string tierAlias;
  int64_t blockId;
  int64_t length;

  _BlockMasterWorkerService_commitBlock_args__isset __isset;

  void __set_workerId(const int64_t val);

  void __set_usedBytesOnTier(const int64_t val);

  void __set_tierAlias(const std::string& val);

  void __set_blockId(const int64_t val);

  void __set_length(const int64_t val);

  bool operator == (const BlockMasterWorkerService_commitBlock_args & rhs) const
  {
    if (!(workerId == rhs.workerId))
      return false;
    if (!(usedBytesOnTier == rhs.usedBytesOnTier))
      return false;
    if (!(tierAlias == rhs.tierAlias))
      return false;
    if (!(blockId == rhs.blockId))
      return false;
    if (!(length == rhs.length))
      return false;
    return true;
  }
  bool operator != (const BlockMasterWorkerService_commitBlock_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BlockMasterWorkerService_commitBlock_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BlockMasterWorkerService_commitBlock_pargs {
 public:


  virtual ~BlockMasterWorkerService_commitBlock_pargs() throw();
  const int64_t* workerId;
  const int64_t* usedBytesOnTier;
  const std::string* tierAlias;
  const int64_t* blockId;
  const int64_t* length;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BlockMasterWorkerService_commitBlock_result__isset {
  _BlockMasterWorkerService_commitBlock_result__isset() : e(false) {}
  bool e :1;
} _BlockMasterWorkerService_commitBlock_result__isset;

class BlockMasterWorkerService_commitBlock_result {
 public:

  BlockMasterWorkerService_commitBlock_result(const BlockMasterWorkerService_commitBlock_result&);
  BlockMasterWorkerService_commitBlock_result& operator=(const BlockMasterWorkerService_commitBlock_result&);
  BlockMasterWorkerService_commitBlock_result() {
  }

  virtual ~BlockMasterWorkerService_commitBlock_result() throw();
   ::AlluxioTException e;

  _BlockMasterWorkerService_commitBlock_result__isset __isset;

  void __set_e(const  ::AlluxioTException& val);

  bool operator == (const BlockMasterWorkerService_commitBlock_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const BlockMasterWorkerService_commitBlock_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BlockMasterWorkerService_commitBlock_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BlockMasterWorkerService_commitBlock_presult__isset {
  _BlockMasterWorkerService_commitBlock_presult__isset() : e(false) {}
  bool e :1;
} _BlockMasterWorkerService_commitBlock_presult__isset;

class BlockMasterWorkerService_commitBlock_presult {
 public:


  virtual ~BlockMasterWorkerService_commitBlock_presult() throw();
   ::AlluxioTException e;

  _BlockMasterWorkerService_commitBlock_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BlockMasterWorkerService_getWorkerId_args__isset {
  _BlockMasterWorkerService_getWorkerId_args__isset() : workerNetAddress(false) {}
  bool workerNetAddress :1;
} _BlockMasterWorkerService_getWorkerId_args__isset;

class BlockMasterWorkerService_getWorkerId_args {
 public:

  BlockMasterWorkerService_getWorkerId_args(const BlockMasterWorkerService_getWorkerId_args&);
  BlockMasterWorkerService_getWorkerId_args& operator=(const BlockMasterWorkerService_getWorkerId_args&);
  BlockMasterWorkerService_getWorkerId_args() {
  }

  virtual ~BlockMasterWorkerService_getWorkerId_args() throw();
   ::WorkerNetAddress workerNetAddress;

  _BlockMasterWorkerService_getWorkerId_args__isset __isset;

  void __set_workerNetAddress(const  ::WorkerNetAddress& val);

  bool operator == (const BlockMasterWorkerService_getWorkerId_args & rhs) const
  {
    if (!(workerNetAddress == rhs.workerNetAddress))
      return false;
    return true;
  }
  bool operator != (const BlockMasterWorkerService_getWorkerId_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BlockMasterWorkerService_getWorkerId_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BlockMasterWorkerService_getWorkerId_pargs {
 public:


  virtual ~BlockMasterWorkerService_getWorkerId_pargs() throw();
  const  ::WorkerNetAddress* workerNetAddress;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BlockMasterWorkerService_getWorkerId_result__isset {
  _BlockMasterWorkerService_getWorkerId_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _BlockMasterWorkerService_getWorkerId_result__isset;

class BlockMasterWorkerService_getWorkerId_result {
 public:

  BlockMasterWorkerService_getWorkerId_result(const BlockMasterWorkerService_getWorkerId_result&);
  BlockMasterWorkerService_getWorkerId_result& operator=(const BlockMasterWorkerService_getWorkerId_result&);
  BlockMasterWorkerService_getWorkerId_result() : success(0) {
  }

  virtual ~BlockMasterWorkerService_getWorkerId_result() throw();
  int64_t success;
   ::AlluxioTException e;

  _BlockMasterWorkerService_getWorkerId_result__isset __isset;

  void __set_success(const int64_t val);

  void __set_e(const  ::AlluxioTException& val);

  bool operator == (const BlockMasterWorkerService_getWorkerId_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const BlockMasterWorkerService_getWorkerId_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BlockMasterWorkerService_getWorkerId_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BlockMasterWorkerService_getWorkerId_presult__isset {
  _BlockMasterWorkerService_getWorkerId_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _BlockMasterWorkerService_getWorkerId_presult__isset;

class BlockMasterWorkerService_getWorkerId_presult {
 public:


  virtual ~BlockMasterWorkerService_getWorkerId_presult() throw();
  int64_t* success;
   ::AlluxioTException e;

  _BlockMasterWorkerService_getWorkerId_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BlockMasterWorkerService_heartbeat_args__isset {
  _BlockMasterWorkerService_heartbeat_args__isset() : workerId(false), usedBytesOnTiers(false), removedBlockIds(false), addedBlocksOnTiers(false) {}
  bool workerId :1;
  bool usedBytesOnTiers :1;
  bool removedBlockIds :1;
  bool addedBlocksOnTiers :1;
} _BlockMasterWorkerService_heartbeat_args__isset;

class BlockMasterWorkerService_heartbeat_args {
 public:

  BlockMasterWorkerService_heartbeat_args(const BlockMasterWorkerService_heartbeat_args&);
  BlockMasterWorkerService_heartbeat_args& operator=(const BlockMasterWorkerService_heartbeat_args&);
  BlockMasterWorkerService_heartbeat_args() : workerId(0) {
  }

  virtual ~BlockMasterWorkerService_heartbeat_args() throw();
  int64_t workerId;
  std::map<std::string, int64_t>  usedBytesOnTiers;
  std::vector<int64_t>  removedBlockIds;
  std::map<std::string, std::vector<int64_t> >  addedBlocksOnTiers;

  _BlockMasterWorkerService_heartbeat_args__isset __isset;

  void __set_workerId(const int64_t val);

  void __set_usedBytesOnTiers(const std::map<std::string, int64_t> & val);

  void __set_removedBlockIds(const std::vector<int64_t> & val);

  void __set_addedBlocksOnTiers(const std::map<std::string, std::vector<int64_t> > & val);

  bool operator == (const BlockMasterWorkerService_heartbeat_args & rhs) const
  {
    if (!(workerId == rhs.workerId))
      return false;
    if (!(usedBytesOnTiers == rhs.usedBytesOnTiers))
      return false;
    if (!(removedBlockIds == rhs.removedBlockIds))
      return false;
    if (!(addedBlocksOnTiers == rhs.addedBlocksOnTiers))
      return false;
    return true;
  }
  bool operator != (const BlockMasterWorkerService_heartbeat_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BlockMasterWorkerService_heartbeat_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BlockMasterWorkerService_heartbeat_pargs {
 public:


  virtual ~BlockMasterWorkerService_heartbeat_pargs() throw();
  const int64_t* workerId;
  const std::map<std::string, int64_t> * usedBytesOnTiers;
  const std::vector<int64_t> * removedBlockIds;
  const std::map<std::string, std::vector<int64_t> > * addedBlocksOnTiers;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BlockMasterWorkerService_heartbeat_result__isset {
  _BlockMasterWorkerService_heartbeat_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _BlockMasterWorkerService_heartbeat_result__isset;

class BlockMasterWorkerService_heartbeat_result {
 public:

  BlockMasterWorkerService_heartbeat_result(const BlockMasterWorkerService_heartbeat_result&);
  BlockMasterWorkerService_heartbeat_result& operator=(const BlockMasterWorkerService_heartbeat_result&);
  BlockMasterWorkerService_heartbeat_result() {
  }

  virtual ~BlockMasterWorkerService_heartbeat_result() throw();
   ::Command success;
   ::AlluxioTException e;

  _BlockMasterWorkerService_heartbeat_result__isset __isset;

  void __set_success(const  ::Command& val);

  void __set_e(const  ::AlluxioTException& val);

  bool operator == (const BlockMasterWorkerService_heartbeat_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const BlockMasterWorkerService_heartbeat_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BlockMasterWorkerService_heartbeat_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BlockMasterWorkerService_heartbeat_presult__isset {
  _BlockMasterWorkerService_heartbeat_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _BlockMasterWorkerService_heartbeat_presult__isset;

class BlockMasterWorkerService_heartbeat_presult {
 public:


  virtual ~BlockMasterWorkerService_heartbeat_presult() throw();
   ::Command* success;
   ::AlluxioTException e;

  _BlockMasterWorkerService_heartbeat_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BlockMasterWorkerService_registerWorker_args__isset {
  _BlockMasterWorkerService_registerWorker_args__isset() : workerId(false), storageTiers(false), totalBytesOnTiers(false), usedBytesOnTiers(false), currentBlocksOnTiers(false) {}
  bool workerId :1;
  bool storageTiers :1;
  bool totalBytesOnTiers :1;
  bool usedBytesOnTiers :1;
  bool currentBlocksOnTiers :1;
} _BlockMasterWorkerService_registerWorker_args__isset;

class BlockMasterWorkerService_registerWorker_args {
 public:

  BlockMasterWorkerService_registerWorker_args(const BlockMasterWorkerService_registerWorker_args&);
  BlockMasterWorkerService_registerWorker_args& operator=(const BlockMasterWorkerService_registerWorker_args&);
  BlockMasterWorkerService_registerWorker_args() : workerId(0) {
  }

  virtual ~BlockMasterWorkerService_registerWorker_args() throw();
  int64_t workerId;
  std::vector<std::string>  storageTiers;
  std::map<std::string, int64_t>  totalBytesOnTiers;
  std::map<std::string, int64_t>  usedBytesOnTiers;
  std::map<std::string, std::vector<int64_t> >  currentBlocksOnTiers;

  _BlockMasterWorkerService_registerWorker_args__isset __isset;

  void __set_workerId(const int64_t val);

  void __set_storageTiers(const std::vector<std::string> & val);

  void __set_totalBytesOnTiers(const std::map<std::string, int64_t> & val);

  void __set_usedBytesOnTiers(const std::map<std::string, int64_t> & val);

  void __set_currentBlocksOnTiers(const std::map<std::string, std::vector<int64_t> > & val);

  bool operator == (const BlockMasterWorkerService_registerWorker_args & rhs) const
  {
    if (!(workerId == rhs.workerId))
      return false;
    if (!(storageTiers == rhs.storageTiers))
      return false;
    if (!(totalBytesOnTiers == rhs.totalBytesOnTiers))
      return false;
    if (!(usedBytesOnTiers == rhs.usedBytesOnTiers))
      return false;
    if (!(currentBlocksOnTiers == rhs.currentBlocksOnTiers))
      return false;
    return true;
  }
  bool operator != (const BlockMasterWorkerService_registerWorker_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BlockMasterWorkerService_registerWorker_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BlockMasterWorkerService_registerWorker_pargs {
 public:


  virtual ~BlockMasterWorkerService_registerWorker_pargs() throw();
  const int64_t* workerId;
  const std::vector<std::string> * storageTiers;
  const std::map<std::string, int64_t> * totalBytesOnTiers;
  const std::map<std::string, int64_t> * usedBytesOnTiers;
  const std::map<std::string, std::vector<int64_t> > * currentBlocksOnTiers;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BlockMasterWorkerService_registerWorker_result__isset {
  _BlockMasterWorkerService_registerWorker_result__isset() : e(false) {}
  bool e :1;
} _BlockMasterWorkerService_registerWorker_result__isset;

class BlockMasterWorkerService_registerWorker_result {
 public:

  BlockMasterWorkerService_registerWorker_result(const BlockMasterWorkerService_registerWorker_result&);
  BlockMasterWorkerService_registerWorker_result& operator=(const BlockMasterWorkerService_registerWorker_result&);
  BlockMasterWorkerService_registerWorker_result() {
  }

  virtual ~BlockMasterWorkerService_registerWorker_result() throw();
   ::AlluxioTException e;

  _BlockMasterWorkerService_registerWorker_result__isset __isset;

  void __set_e(const  ::AlluxioTException& val);

  bool operator == (const BlockMasterWorkerService_registerWorker_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const BlockMasterWorkerService_registerWorker_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BlockMasterWorkerService_registerWorker_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BlockMasterWorkerService_registerWorker_presult__isset {
  _BlockMasterWorkerService_registerWorker_presult__isset() : e(false) {}
  bool e :1;
} _BlockMasterWorkerService_registerWorker_presult__isset;

class BlockMasterWorkerService_registerWorker_presult {
 public:


  virtual ~BlockMasterWorkerService_registerWorker_presult() throw();
   ::AlluxioTException e;

  _BlockMasterWorkerService_registerWorker_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class BlockMasterWorkerServiceClient : virtual public BlockMasterWorkerServiceIf, public  ::AlluxioServiceClient {
 public:
  BlockMasterWorkerServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
     ::AlluxioServiceClient(prot, prot) {}
  BlockMasterWorkerServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :     ::AlluxioServiceClient(iprot, oprot) {}
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void commitBlock(const int64_t workerId, const int64_t usedBytesOnTier, const std::string& tierAlias, const int64_t blockId, const int64_t length);
  void send_commitBlock(const int64_t workerId, const int64_t usedBytesOnTier, const std::string& tierAlias, const int64_t blockId, const int64_t length);
  void recv_commitBlock();
  int64_t getWorkerId(const  ::WorkerNetAddress& workerNetAddress);
  void send_getWorkerId(const  ::WorkerNetAddress& workerNetAddress);
  int64_t recv_getWorkerId();
  void heartbeat( ::Command& _return, const int64_t workerId, const std::map<std::string, int64_t> & usedBytesOnTiers, const std::vector<int64_t> & removedBlockIds, const std::map<std::string, std::vector<int64_t> > & addedBlocksOnTiers);
  void send_heartbeat(const int64_t workerId, const std::map<std::string, int64_t> & usedBytesOnTiers, const std::vector<int64_t> & removedBlockIds, const std::map<std::string, std::vector<int64_t> > & addedBlocksOnTiers);
  void recv_heartbeat( ::Command& _return);
  void registerWorker(const int64_t workerId, const std::vector<std::string> & storageTiers, const std::map<std::string, int64_t> & totalBytesOnTiers, const std::map<std::string, int64_t> & usedBytesOnTiers, const std::map<std::string, std::vector<int64_t> > & currentBlocksOnTiers);
  void send_registerWorker(const int64_t workerId, const std::vector<std::string> & storageTiers, const std::map<std::string, int64_t> & totalBytesOnTiers, const std::map<std::string, int64_t> & usedBytesOnTiers, const std::map<std::string, std::vector<int64_t> > & currentBlocksOnTiers);
  void recv_registerWorker();
};

class BlockMasterWorkerServiceProcessor : public  ::AlluxioServiceProcessor {
 protected:
  boost::shared_ptr<BlockMasterWorkerServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (BlockMasterWorkerServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_commitBlock(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getWorkerId(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_heartbeat(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_registerWorker(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  BlockMasterWorkerServiceProcessor(boost::shared_ptr<BlockMasterWorkerServiceIf> iface) :
     ::AlluxioServiceProcessor(iface),
    iface_(iface) {
    processMap_["commitBlock"] = &BlockMasterWorkerServiceProcessor::process_commitBlock;
    processMap_["getWorkerId"] = &BlockMasterWorkerServiceProcessor::process_getWorkerId;
    processMap_["heartbeat"] = &BlockMasterWorkerServiceProcessor::process_heartbeat;
    processMap_["registerWorker"] = &BlockMasterWorkerServiceProcessor::process_registerWorker;
  }

  virtual ~BlockMasterWorkerServiceProcessor() {}
};

class BlockMasterWorkerServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  BlockMasterWorkerServiceProcessorFactory(const ::boost::shared_ptr< BlockMasterWorkerServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< BlockMasterWorkerServiceIfFactory > handlerFactory_;
};

class BlockMasterWorkerServiceMultiface : virtual public BlockMasterWorkerServiceIf, public  ::AlluxioServiceMultiface {
 public:
  BlockMasterWorkerServiceMultiface(std::vector<boost::shared_ptr<BlockMasterWorkerServiceIf> >& ifaces) : ifaces_(ifaces) {
    std::vector<boost::shared_ptr<BlockMasterWorkerServiceIf> >::iterator iter;
    for (iter = ifaces.begin(); iter != ifaces.end(); ++iter) {
       ::AlluxioServiceMultiface::add(*iter);
    }
  }
  virtual ~BlockMasterWorkerServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<BlockMasterWorkerServiceIf> > ifaces_;
  BlockMasterWorkerServiceMultiface() {}
  void add(boost::shared_ptr<BlockMasterWorkerServiceIf> iface) {
     ::AlluxioServiceMultiface::add(iface);
    ifaces_.push_back(iface);
  }
 public:
  void commitBlock(const int64_t workerId, const int64_t usedBytesOnTier, const std::string& tierAlias, const int64_t blockId, const int64_t length) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->commitBlock(workerId, usedBytesOnTier, tierAlias, blockId, length);
    }
    ifaces_[i]->commitBlock(workerId, usedBytesOnTier, tierAlias, blockId, length);
  }

  int64_t getWorkerId(const  ::WorkerNetAddress& workerNetAddress) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getWorkerId(workerNetAddress);
    }
    return ifaces_[i]->getWorkerId(workerNetAddress);
  }

  void heartbeat( ::Command& _return, const int64_t workerId, const std::map<std::string, int64_t> & usedBytesOnTiers, const std::vector<int64_t> & removedBlockIds, const std::map<std::string, std::vector<int64_t> > & addedBlocksOnTiers) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->heartbeat(_return, workerId, usedBytesOnTiers, removedBlockIds, addedBlocksOnTiers);
    }
    ifaces_[i]->heartbeat(_return, workerId, usedBytesOnTiers, removedBlockIds, addedBlocksOnTiers);
    return;
  }

  void registerWorker(const int64_t workerId, const std::vector<std::string> & storageTiers, const std::map<std::string, int64_t> & totalBytesOnTiers, const std::map<std::string, int64_t> & usedBytesOnTiers, const std::map<std::string, std::vector<int64_t> > & currentBlocksOnTiers) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->registerWorker(workerId, storageTiers, totalBytesOnTiers, usedBytesOnTiers, currentBlocksOnTiers);
    }
    ifaces_[i]->registerWorker(workerId, storageTiers, totalBytesOnTiers, usedBytesOnTiers, currentBlocksOnTiers);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class BlockMasterWorkerServiceConcurrentClient : virtual public BlockMasterWorkerServiceIf, public  ::AlluxioServiceConcurrentClient {
 public:
  BlockMasterWorkerServiceConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
     ::AlluxioServiceConcurrentClient(prot, prot) {}
  BlockMasterWorkerServiceConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :     ::AlluxioServiceConcurrentClient(iprot, oprot) {}
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void commitBlock(const int64_t workerId, const int64_t usedBytesOnTier, const std::string& tierAlias, const int64_t blockId, const int64_t length);
  int32_t send_commitBlock(const int64_t workerId, const int64_t usedBytesOnTier, const std::string& tierAlias, const int64_t blockId, const int64_t length);
  void recv_commitBlock(const int32_t seqid);
  int64_t getWorkerId(const  ::WorkerNetAddress& workerNetAddress);
  int32_t send_getWorkerId(const  ::WorkerNetAddress& workerNetAddress);
  int64_t recv_getWorkerId(const int32_t seqid);
  void heartbeat( ::Command& _return, const int64_t workerId, const std::map<std::string, int64_t> & usedBytesOnTiers, const std::vector<int64_t> & removedBlockIds, const std::map<std::string, std::vector<int64_t> > & addedBlocksOnTiers);
  int32_t send_heartbeat(const int64_t workerId, const std::map<std::string, int64_t> & usedBytesOnTiers, const std::vector<int64_t> & removedBlockIds, const std::map<std::string, std::vector<int64_t> > & addedBlocksOnTiers);
  void recv_heartbeat( ::Command& _return, const int32_t seqid);
  void registerWorker(const int64_t workerId, const std::vector<std::string> & storageTiers, const std::map<std::string, int64_t> & totalBytesOnTiers, const std::map<std::string, int64_t> & usedBytesOnTiers, const std::map<std::string, std::vector<int64_t> > & currentBlocksOnTiers);
  int32_t send_registerWorker(const int64_t workerId, const std::vector<std::string> & storageTiers, const std::map<std::string, int64_t> & totalBytesOnTiers, const std::map<std::string, int64_t> & usedBytesOnTiers, const std::map<std::string, std::vector<int64_t> > & currentBlocksOnTiers);
  void recv_registerWorker(const int32_t seqid);
};

#ifdef _WIN32
  #pragma warning( pop )
#endif



#endif
