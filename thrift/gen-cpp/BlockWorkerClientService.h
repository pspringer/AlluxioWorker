/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef BlockWorkerClientService_H
#define BlockWorkerClientService_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "block_worker_types.h"
#include "AlluxioService.h"



#ifdef _WIN32
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class BlockWorkerClientServiceIf : virtual public  ::AlluxioServiceIf {
 public:
  virtual ~BlockWorkerClientServiceIf() {}

  /**
   * Accesses a block given the block id.
   * 
   * @param blockId the id of the block being accessed
   */
  virtual void accessBlock(const int64_t blockId) = 0;

  /**
   * Used to cache a block into Alluxio space, worker will move the temporary block file from session
   * folder to data folder, and update the space usage information related. then update the block
   * information to master.
   * 
   * @param sessionId the id of the current session
   * 
   * @param blockId the id of the block being accessed
   */
  virtual void cacheBlock(const int64_t sessionId, const int64_t blockId) = 0;

  /**
   * Used to cancel a block which is being written. worker will delete the temporary block file and
   * the location and space information related, then reclaim space allocated to the block.
   * 
   * @param sessionId the id of the current session
   * 
   * @param blockId the id of the block being accessed
   */
  virtual void cancelBlock(const int64_t sessionId, const int64_t blockId) = 0;

  /**
   * Locks the file in Alluxio's space while the session is reading it. If lock succeeds, the path of
   * the block's file along with the internal lock id of locked block will be returned. If the block's file
   * is not found, FileDoesNotExistException will be thrown.
   * 
   * @param blockId the id of the block being accessed
   * 
   * @param sessionId the id of the current session
   */
  virtual void lockBlock(LockBlockResult& _return, const int64_t blockId, const int64_t sessionId) = 0;

  /**
   * Used to promote block on under storage layer to top storage layer when there are more than one
   * storage layers in Alluxio's space. return true if the block is successfully promoted, false
   * otherwise.
   * 
   * @param blockId the id of the block being accessed
   */
  virtual bool promoteBlock(const int64_t blockId) = 0;

  /**
   * Used to remove a block from an Alluxio worker.
   * 
   * 
   * @param blockId the id of the block being removed
   */
  virtual void removeBlock(const int64_t blockId) = 0;

  /**
   * Used to allocate location and space for a new coming block, worker will choose the appropriate
   * storage directory which fits the initial block size by some allocation strategy, and the
   * temporary file path of the block file will be returned. if there is no enough space on Alluxio
   * storage OutOfSpaceException will be thrown, if the file is already being written by the session,
   * FileAlreadyExistsException will be thrown.
   * 
   * @param sessionId the id of the current session
   * 
   * @param blockId the id of the block being accessed
   * 
   * @param initialBytes initial number of bytes requested
   * 
   * @param writeTier the target tier to write to
   */
  virtual void requestBlockLocation(std::string& _return, const int64_t sessionId, const int64_t blockId, const int64_t initialBytes, const int32_t writeTier) = 0;

  /**
   * Used to request space for some block file. return true if the worker successfully allocates
   * space for the block on block's location, false if there is no enough space, if there is no
   * information of the block on worker, FileDoesNotExistException will be thrown.
   * 
   * @param sessionId the id of the current session
   * 
   * @param blockId the id of the block being accessed
   * 
   * @param requestBytes the number of bytes requested
   */
  virtual bool requestSpace(const int64_t sessionId, const int64_t blockId, const int64_t requestBytes) = 0;

  /**
   * Local session send heartbeat to local worker to keep its temporary folder.
   * 
   * @param sessionId the id of the current session
   * 
   * @param metrics deprecated since 1.3.0 and will be removed in 2.0
   */
  virtual void sessionHeartbeat(const int64_t sessionId, const std::vector<int64_t> & metrics) = 0;

  /**
   * Used to unlock a block after the block is accessed, if the block is to be removed, delete the
   * block file. return true if successfully unlock the block, return false if the block is not
   * found or failed to delete the block.
   * 
   * @param blockId the id of the block being accessed
   * 
   * @param sessionId the id of the current session
   */
  virtual bool unlockBlock(const int64_t blockId, const int64_t sessionId) = 0;
};

class BlockWorkerClientServiceIfFactory : virtual public  ::AlluxioServiceIfFactory {
 public:
  typedef BlockWorkerClientServiceIf Handler;

  virtual ~BlockWorkerClientServiceIfFactory() {}

  virtual BlockWorkerClientServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler( ::AlluxioServiceIf* /* handler */) = 0;
};

class BlockWorkerClientServiceIfSingletonFactory : virtual public BlockWorkerClientServiceIfFactory {
 public:
  BlockWorkerClientServiceIfSingletonFactory(const boost::shared_ptr<BlockWorkerClientServiceIf>& iface) : iface_(iface) {}
  virtual ~BlockWorkerClientServiceIfSingletonFactory() {}

  virtual BlockWorkerClientServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler( ::AlluxioServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<BlockWorkerClientServiceIf> iface_;
};

class BlockWorkerClientServiceNull : virtual public BlockWorkerClientServiceIf , virtual public  ::AlluxioServiceNull {
 public:
  virtual ~BlockWorkerClientServiceNull() {}
  void accessBlock(const int64_t /* blockId */) {
    return;
  }
  void cacheBlock(const int64_t /* sessionId */, const int64_t /* blockId */) {
    return;
  }
  void cancelBlock(const int64_t /* sessionId */, const int64_t /* blockId */) {
    return;
  }
  void lockBlock(LockBlockResult& /* _return */, const int64_t /* blockId */, const int64_t /* sessionId */) {
    return;
  }
  bool promoteBlock(const int64_t /* blockId */) {
    bool _return = false;
    return _return;
  }
  void removeBlock(const int64_t /* blockId */) {
    return;
  }
  void requestBlockLocation(std::string& /* _return */, const int64_t /* sessionId */, const int64_t /* blockId */, const int64_t /* initialBytes */, const int32_t /* writeTier */) {
    return;
  }
  bool requestSpace(const int64_t /* sessionId */, const int64_t /* blockId */, const int64_t /* requestBytes */) {
    bool _return = false;
    return _return;
  }
  void sessionHeartbeat(const int64_t /* sessionId */, const std::vector<int64_t> & /* metrics */) {
    return;
  }
  bool unlockBlock(const int64_t /* blockId */, const int64_t /* sessionId */) {
    bool _return = false;
    return _return;
  }
};

typedef struct _BlockWorkerClientService_accessBlock_args__isset {
  _BlockWorkerClientService_accessBlock_args__isset() : blockId(false) {}
  bool blockId :1;
} _BlockWorkerClientService_accessBlock_args__isset;

class BlockWorkerClientService_accessBlock_args {
 public:

  BlockWorkerClientService_accessBlock_args(const BlockWorkerClientService_accessBlock_args&);
  BlockWorkerClientService_accessBlock_args& operator=(const BlockWorkerClientService_accessBlock_args&);
  BlockWorkerClientService_accessBlock_args() : blockId(0) {
  }

  virtual ~BlockWorkerClientService_accessBlock_args() throw();
  int64_t blockId;

  _BlockWorkerClientService_accessBlock_args__isset __isset;

  void __set_blockId(const int64_t val);

  bool operator == (const BlockWorkerClientService_accessBlock_args & rhs) const
  {
    if (!(blockId == rhs.blockId))
      return false;
    return true;
  }
  bool operator != (const BlockWorkerClientService_accessBlock_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BlockWorkerClientService_accessBlock_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BlockWorkerClientService_accessBlock_pargs {
 public:


  virtual ~BlockWorkerClientService_accessBlock_pargs() throw();
  const int64_t* blockId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BlockWorkerClientService_accessBlock_result__isset {
  _BlockWorkerClientService_accessBlock_result__isset() : e(false) {}
  bool e :1;
} _BlockWorkerClientService_accessBlock_result__isset;

class BlockWorkerClientService_accessBlock_result {
 public:

  BlockWorkerClientService_accessBlock_result(const BlockWorkerClientService_accessBlock_result&);
  BlockWorkerClientService_accessBlock_result& operator=(const BlockWorkerClientService_accessBlock_result&);
  BlockWorkerClientService_accessBlock_result() {
  }

  virtual ~BlockWorkerClientService_accessBlock_result() throw();
   ::AlluxioTException e;

  _BlockWorkerClientService_accessBlock_result__isset __isset;

  void __set_e(const  ::AlluxioTException& val);

  bool operator == (const BlockWorkerClientService_accessBlock_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const BlockWorkerClientService_accessBlock_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BlockWorkerClientService_accessBlock_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BlockWorkerClientService_accessBlock_presult__isset {
  _BlockWorkerClientService_accessBlock_presult__isset() : e(false) {}
  bool e :1;
} _BlockWorkerClientService_accessBlock_presult__isset;

class BlockWorkerClientService_accessBlock_presult {
 public:


  virtual ~BlockWorkerClientService_accessBlock_presult() throw();
   ::AlluxioTException e;

  _BlockWorkerClientService_accessBlock_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BlockWorkerClientService_cacheBlock_args__isset {
  _BlockWorkerClientService_cacheBlock_args__isset() : sessionId(false), blockId(false) {}
  bool sessionId :1;
  bool blockId :1;
} _BlockWorkerClientService_cacheBlock_args__isset;

class BlockWorkerClientService_cacheBlock_args {
 public:

  BlockWorkerClientService_cacheBlock_args(const BlockWorkerClientService_cacheBlock_args&);
  BlockWorkerClientService_cacheBlock_args& operator=(const BlockWorkerClientService_cacheBlock_args&);
  BlockWorkerClientService_cacheBlock_args() : sessionId(0), blockId(0) {
  }

  virtual ~BlockWorkerClientService_cacheBlock_args() throw();
  int64_t sessionId;
  int64_t blockId;

  _BlockWorkerClientService_cacheBlock_args__isset __isset;

  void __set_sessionId(const int64_t val);

  void __set_blockId(const int64_t val);

  bool operator == (const BlockWorkerClientService_cacheBlock_args & rhs) const
  {
    if (!(sessionId == rhs.sessionId))
      return false;
    if (!(blockId == rhs.blockId))
      return false;
    return true;
  }
  bool operator != (const BlockWorkerClientService_cacheBlock_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BlockWorkerClientService_cacheBlock_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BlockWorkerClientService_cacheBlock_pargs {
 public:


  virtual ~BlockWorkerClientService_cacheBlock_pargs() throw();
  const int64_t* sessionId;
  const int64_t* blockId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BlockWorkerClientService_cacheBlock_result__isset {
  _BlockWorkerClientService_cacheBlock_result__isset() : e(false), ioe(false) {}
  bool e :1;
  bool ioe :1;
} _BlockWorkerClientService_cacheBlock_result__isset;

class BlockWorkerClientService_cacheBlock_result {
 public:

  BlockWorkerClientService_cacheBlock_result(const BlockWorkerClientService_cacheBlock_result&);
  BlockWorkerClientService_cacheBlock_result& operator=(const BlockWorkerClientService_cacheBlock_result&);
  BlockWorkerClientService_cacheBlock_result() {
  }

  virtual ~BlockWorkerClientService_cacheBlock_result() throw();
   ::AlluxioTException e;
   ::ThriftIOException ioe;

  _BlockWorkerClientService_cacheBlock_result__isset __isset;

  void __set_e(const  ::AlluxioTException& val);

  void __set_ioe(const  ::ThriftIOException& val);

  bool operator == (const BlockWorkerClientService_cacheBlock_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    if (!(ioe == rhs.ioe))
      return false;
    return true;
  }
  bool operator != (const BlockWorkerClientService_cacheBlock_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BlockWorkerClientService_cacheBlock_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BlockWorkerClientService_cacheBlock_presult__isset {
  _BlockWorkerClientService_cacheBlock_presult__isset() : e(false), ioe(false) {}
  bool e :1;
  bool ioe :1;
} _BlockWorkerClientService_cacheBlock_presult__isset;

class BlockWorkerClientService_cacheBlock_presult {
 public:


  virtual ~BlockWorkerClientService_cacheBlock_presult() throw();
   ::AlluxioTException e;
   ::ThriftIOException ioe;

  _BlockWorkerClientService_cacheBlock_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BlockWorkerClientService_cancelBlock_args__isset {
  _BlockWorkerClientService_cancelBlock_args__isset() : sessionId(false), blockId(false) {}
  bool sessionId :1;
  bool blockId :1;
} _BlockWorkerClientService_cancelBlock_args__isset;

class BlockWorkerClientService_cancelBlock_args {
 public:

  BlockWorkerClientService_cancelBlock_args(const BlockWorkerClientService_cancelBlock_args&);
  BlockWorkerClientService_cancelBlock_args& operator=(const BlockWorkerClientService_cancelBlock_args&);
  BlockWorkerClientService_cancelBlock_args() : sessionId(0), blockId(0) {
  }

  virtual ~BlockWorkerClientService_cancelBlock_args() throw();
  int64_t sessionId;
  int64_t blockId;

  _BlockWorkerClientService_cancelBlock_args__isset __isset;

  void __set_sessionId(const int64_t val);

  void __set_blockId(const int64_t val);

  bool operator == (const BlockWorkerClientService_cancelBlock_args & rhs) const
  {
    if (!(sessionId == rhs.sessionId))
      return false;
    if (!(blockId == rhs.blockId))
      return false;
    return true;
  }
  bool operator != (const BlockWorkerClientService_cancelBlock_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BlockWorkerClientService_cancelBlock_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BlockWorkerClientService_cancelBlock_pargs {
 public:


  virtual ~BlockWorkerClientService_cancelBlock_pargs() throw();
  const int64_t* sessionId;
  const int64_t* blockId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BlockWorkerClientService_cancelBlock_result__isset {
  _BlockWorkerClientService_cancelBlock_result__isset() : e(false), ioe(false) {}
  bool e :1;
  bool ioe :1;
} _BlockWorkerClientService_cancelBlock_result__isset;

class BlockWorkerClientService_cancelBlock_result {
 public:

  BlockWorkerClientService_cancelBlock_result(const BlockWorkerClientService_cancelBlock_result&);
  BlockWorkerClientService_cancelBlock_result& operator=(const BlockWorkerClientService_cancelBlock_result&);
  BlockWorkerClientService_cancelBlock_result() {
  }

  virtual ~BlockWorkerClientService_cancelBlock_result() throw();
   ::AlluxioTException e;
   ::ThriftIOException ioe;

  _BlockWorkerClientService_cancelBlock_result__isset __isset;

  void __set_e(const  ::AlluxioTException& val);

  void __set_ioe(const  ::ThriftIOException& val);

  bool operator == (const BlockWorkerClientService_cancelBlock_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    if (!(ioe == rhs.ioe))
      return false;
    return true;
  }
  bool operator != (const BlockWorkerClientService_cancelBlock_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BlockWorkerClientService_cancelBlock_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BlockWorkerClientService_cancelBlock_presult__isset {
  _BlockWorkerClientService_cancelBlock_presult__isset() : e(false), ioe(false) {}
  bool e :1;
  bool ioe :1;
} _BlockWorkerClientService_cancelBlock_presult__isset;

class BlockWorkerClientService_cancelBlock_presult {
 public:


  virtual ~BlockWorkerClientService_cancelBlock_presult() throw();
   ::AlluxioTException e;
   ::ThriftIOException ioe;

  _BlockWorkerClientService_cancelBlock_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BlockWorkerClientService_lockBlock_args__isset {
  _BlockWorkerClientService_lockBlock_args__isset() : blockId(false), sessionId(false) {}
  bool blockId :1;
  bool sessionId :1;
} _BlockWorkerClientService_lockBlock_args__isset;

class BlockWorkerClientService_lockBlock_args {
 public:

  BlockWorkerClientService_lockBlock_args(const BlockWorkerClientService_lockBlock_args&);
  BlockWorkerClientService_lockBlock_args& operator=(const BlockWorkerClientService_lockBlock_args&);
  BlockWorkerClientService_lockBlock_args() : blockId(0), sessionId(0) {
  }

  virtual ~BlockWorkerClientService_lockBlock_args() throw();
  int64_t blockId;
  int64_t sessionId;

  _BlockWorkerClientService_lockBlock_args__isset __isset;

  void __set_blockId(const int64_t val);

  void __set_sessionId(const int64_t val);

  bool operator == (const BlockWorkerClientService_lockBlock_args & rhs) const
  {
    if (!(blockId == rhs.blockId))
      return false;
    if (!(sessionId == rhs.sessionId))
      return false;
    return true;
  }
  bool operator != (const BlockWorkerClientService_lockBlock_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BlockWorkerClientService_lockBlock_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BlockWorkerClientService_lockBlock_pargs {
 public:


  virtual ~BlockWorkerClientService_lockBlock_pargs() throw();
  const int64_t* blockId;
  const int64_t* sessionId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BlockWorkerClientService_lockBlock_result__isset {
  _BlockWorkerClientService_lockBlock_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _BlockWorkerClientService_lockBlock_result__isset;

class BlockWorkerClientService_lockBlock_result {
 public:

  BlockWorkerClientService_lockBlock_result(const BlockWorkerClientService_lockBlock_result&);
  BlockWorkerClientService_lockBlock_result& operator=(const BlockWorkerClientService_lockBlock_result&);
  BlockWorkerClientService_lockBlock_result() {
  }

  virtual ~BlockWorkerClientService_lockBlock_result() throw();
  LockBlockResult success;
   ::AlluxioTException e;

  _BlockWorkerClientService_lockBlock_result__isset __isset;

  void __set_success(const LockBlockResult& val);

  void __set_e(const  ::AlluxioTException& val);

  bool operator == (const BlockWorkerClientService_lockBlock_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const BlockWorkerClientService_lockBlock_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BlockWorkerClientService_lockBlock_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BlockWorkerClientService_lockBlock_presult__isset {
  _BlockWorkerClientService_lockBlock_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _BlockWorkerClientService_lockBlock_presult__isset;

class BlockWorkerClientService_lockBlock_presult {
 public:


  virtual ~BlockWorkerClientService_lockBlock_presult() throw();
  LockBlockResult* success;
   ::AlluxioTException e;

  _BlockWorkerClientService_lockBlock_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BlockWorkerClientService_promoteBlock_args__isset {
  _BlockWorkerClientService_promoteBlock_args__isset() : blockId(false) {}
  bool blockId :1;
} _BlockWorkerClientService_promoteBlock_args__isset;

class BlockWorkerClientService_promoteBlock_args {
 public:

  BlockWorkerClientService_promoteBlock_args(const BlockWorkerClientService_promoteBlock_args&);
  BlockWorkerClientService_promoteBlock_args& operator=(const BlockWorkerClientService_promoteBlock_args&);
  BlockWorkerClientService_promoteBlock_args() : blockId(0) {
  }

  virtual ~BlockWorkerClientService_promoteBlock_args() throw();
  int64_t blockId;

  _BlockWorkerClientService_promoteBlock_args__isset __isset;

  void __set_blockId(const int64_t val);

  bool operator == (const BlockWorkerClientService_promoteBlock_args & rhs) const
  {
    if (!(blockId == rhs.blockId))
      return false;
    return true;
  }
  bool operator != (const BlockWorkerClientService_promoteBlock_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BlockWorkerClientService_promoteBlock_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BlockWorkerClientService_promoteBlock_pargs {
 public:


  virtual ~BlockWorkerClientService_promoteBlock_pargs() throw();
  const int64_t* blockId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BlockWorkerClientService_promoteBlock_result__isset {
  _BlockWorkerClientService_promoteBlock_result__isset() : success(false), e(false), ioe(false) {}
  bool success :1;
  bool e :1;
  bool ioe :1;
} _BlockWorkerClientService_promoteBlock_result__isset;

class BlockWorkerClientService_promoteBlock_result {
 public:

  BlockWorkerClientService_promoteBlock_result(const BlockWorkerClientService_promoteBlock_result&);
  BlockWorkerClientService_promoteBlock_result& operator=(const BlockWorkerClientService_promoteBlock_result&);
  BlockWorkerClientService_promoteBlock_result() : success(0) {
  }

  virtual ~BlockWorkerClientService_promoteBlock_result() throw();
  bool success;
   ::AlluxioTException e;
   ::ThriftIOException ioe;

  _BlockWorkerClientService_promoteBlock_result__isset __isset;

  void __set_success(const bool val);

  void __set_e(const  ::AlluxioTException& val);

  void __set_ioe(const  ::ThriftIOException& val);

  bool operator == (const BlockWorkerClientService_promoteBlock_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    if (!(ioe == rhs.ioe))
      return false;
    return true;
  }
  bool operator != (const BlockWorkerClientService_promoteBlock_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BlockWorkerClientService_promoteBlock_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BlockWorkerClientService_promoteBlock_presult__isset {
  _BlockWorkerClientService_promoteBlock_presult__isset() : success(false), e(false), ioe(false) {}
  bool success :1;
  bool e :1;
  bool ioe :1;
} _BlockWorkerClientService_promoteBlock_presult__isset;

class BlockWorkerClientService_promoteBlock_presult {
 public:


  virtual ~BlockWorkerClientService_promoteBlock_presult() throw();
  bool* success;
   ::AlluxioTException e;
   ::ThriftIOException ioe;

  _BlockWorkerClientService_promoteBlock_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BlockWorkerClientService_removeBlock_args__isset {
  _BlockWorkerClientService_removeBlock_args__isset() : blockId(false) {}
  bool blockId :1;
} _BlockWorkerClientService_removeBlock_args__isset;

class BlockWorkerClientService_removeBlock_args {
 public:

  BlockWorkerClientService_removeBlock_args(const BlockWorkerClientService_removeBlock_args&);
  BlockWorkerClientService_removeBlock_args& operator=(const BlockWorkerClientService_removeBlock_args&);
  BlockWorkerClientService_removeBlock_args() : blockId(0) {
  }

  virtual ~BlockWorkerClientService_removeBlock_args() throw();
  int64_t blockId;

  _BlockWorkerClientService_removeBlock_args__isset __isset;

  void __set_blockId(const int64_t val);

  bool operator == (const BlockWorkerClientService_removeBlock_args & rhs) const
  {
    if (!(blockId == rhs.blockId))
      return false;
    return true;
  }
  bool operator != (const BlockWorkerClientService_removeBlock_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BlockWorkerClientService_removeBlock_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BlockWorkerClientService_removeBlock_pargs {
 public:


  virtual ~BlockWorkerClientService_removeBlock_pargs() throw();
  const int64_t* blockId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BlockWorkerClientService_removeBlock_result__isset {
  _BlockWorkerClientService_removeBlock_result__isset() : e(false), ioe(false) {}
  bool e :1;
  bool ioe :1;
} _BlockWorkerClientService_removeBlock_result__isset;

class BlockWorkerClientService_removeBlock_result {
 public:

  BlockWorkerClientService_removeBlock_result(const BlockWorkerClientService_removeBlock_result&);
  BlockWorkerClientService_removeBlock_result& operator=(const BlockWorkerClientService_removeBlock_result&);
  BlockWorkerClientService_removeBlock_result() {
  }

  virtual ~BlockWorkerClientService_removeBlock_result() throw();
   ::AlluxioTException e;
   ::ThriftIOException ioe;

  _BlockWorkerClientService_removeBlock_result__isset __isset;

  void __set_e(const  ::AlluxioTException& val);

  void __set_ioe(const  ::ThriftIOException& val);

  bool operator == (const BlockWorkerClientService_removeBlock_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    if (!(ioe == rhs.ioe))
      return false;
    return true;
  }
  bool operator != (const BlockWorkerClientService_removeBlock_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BlockWorkerClientService_removeBlock_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BlockWorkerClientService_removeBlock_presult__isset {
  _BlockWorkerClientService_removeBlock_presult__isset() : e(false), ioe(false) {}
  bool e :1;
  bool ioe :1;
} _BlockWorkerClientService_removeBlock_presult__isset;

class BlockWorkerClientService_removeBlock_presult {
 public:


  virtual ~BlockWorkerClientService_removeBlock_presult() throw();
   ::AlluxioTException e;
   ::ThriftIOException ioe;

  _BlockWorkerClientService_removeBlock_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BlockWorkerClientService_requestBlockLocation_args__isset {
  _BlockWorkerClientService_requestBlockLocation_args__isset() : sessionId(false), blockId(false), initialBytes(false), writeTier(false) {}
  bool sessionId :1;
  bool blockId :1;
  bool initialBytes :1;
  bool writeTier :1;
} _BlockWorkerClientService_requestBlockLocation_args__isset;

class BlockWorkerClientService_requestBlockLocation_args {
 public:

  BlockWorkerClientService_requestBlockLocation_args(const BlockWorkerClientService_requestBlockLocation_args&);
  BlockWorkerClientService_requestBlockLocation_args& operator=(const BlockWorkerClientService_requestBlockLocation_args&);
  BlockWorkerClientService_requestBlockLocation_args() : sessionId(0), blockId(0), initialBytes(0), writeTier(0) {
  }

  virtual ~BlockWorkerClientService_requestBlockLocation_args() throw();
  int64_t sessionId;
  int64_t blockId;
  int64_t initialBytes;
  int32_t writeTier;

  _BlockWorkerClientService_requestBlockLocation_args__isset __isset;

  void __set_sessionId(const int64_t val);

  void __set_blockId(const int64_t val);

  void __set_initialBytes(const int64_t val);

  void __set_writeTier(const int32_t val);

  bool operator == (const BlockWorkerClientService_requestBlockLocation_args & rhs) const
  {
    if (!(sessionId == rhs.sessionId))
      return false;
    if (!(blockId == rhs.blockId))
      return false;
    if (!(initialBytes == rhs.initialBytes))
      return false;
    if (!(writeTier == rhs.writeTier))
      return false;
    return true;
  }
  bool operator != (const BlockWorkerClientService_requestBlockLocation_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BlockWorkerClientService_requestBlockLocation_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BlockWorkerClientService_requestBlockLocation_pargs {
 public:


  virtual ~BlockWorkerClientService_requestBlockLocation_pargs() throw();
  const int64_t* sessionId;
  const int64_t* blockId;
  const int64_t* initialBytes;
  const int32_t* writeTier;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BlockWorkerClientService_requestBlockLocation_result__isset {
  _BlockWorkerClientService_requestBlockLocation_result__isset() : success(false), e(false), ioe(false) {}
  bool success :1;
  bool e :1;
  bool ioe :1;
} _BlockWorkerClientService_requestBlockLocation_result__isset;

class BlockWorkerClientService_requestBlockLocation_result {
 public:

  BlockWorkerClientService_requestBlockLocation_result(const BlockWorkerClientService_requestBlockLocation_result&);
  BlockWorkerClientService_requestBlockLocation_result& operator=(const BlockWorkerClientService_requestBlockLocation_result&);
  BlockWorkerClientService_requestBlockLocation_result() : success() {
  }

  virtual ~BlockWorkerClientService_requestBlockLocation_result() throw();
  std::string success;
   ::AlluxioTException e;
   ::ThriftIOException ioe;

  _BlockWorkerClientService_requestBlockLocation_result__isset __isset;

  void __set_success(const std::string& val);

  void __set_e(const  ::AlluxioTException& val);

  void __set_ioe(const  ::ThriftIOException& val);

  bool operator == (const BlockWorkerClientService_requestBlockLocation_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    if (!(ioe == rhs.ioe))
      return false;
    return true;
  }
  bool operator != (const BlockWorkerClientService_requestBlockLocation_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BlockWorkerClientService_requestBlockLocation_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BlockWorkerClientService_requestBlockLocation_presult__isset {
  _BlockWorkerClientService_requestBlockLocation_presult__isset() : success(false), e(false), ioe(false) {}
  bool success :1;
  bool e :1;
  bool ioe :1;
} _BlockWorkerClientService_requestBlockLocation_presult__isset;

class BlockWorkerClientService_requestBlockLocation_presult {
 public:


  virtual ~BlockWorkerClientService_requestBlockLocation_presult() throw();
  std::string* success;
   ::AlluxioTException e;
   ::ThriftIOException ioe;

  _BlockWorkerClientService_requestBlockLocation_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BlockWorkerClientService_requestSpace_args__isset {
  _BlockWorkerClientService_requestSpace_args__isset() : sessionId(false), blockId(false), requestBytes(false) {}
  bool sessionId :1;
  bool blockId :1;
  bool requestBytes :1;
} _BlockWorkerClientService_requestSpace_args__isset;

class BlockWorkerClientService_requestSpace_args {
 public:

  BlockWorkerClientService_requestSpace_args(const BlockWorkerClientService_requestSpace_args&);
  BlockWorkerClientService_requestSpace_args& operator=(const BlockWorkerClientService_requestSpace_args&);
  BlockWorkerClientService_requestSpace_args() : sessionId(0), blockId(0), requestBytes(0) {
  }

  virtual ~BlockWorkerClientService_requestSpace_args() throw();
  int64_t sessionId;
  int64_t blockId;
  int64_t requestBytes;

  _BlockWorkerClientService_requestSpace_args__isset __isset;

  void __set_sessionId(const int64_t val);

  void __set_blockId(const int64_t val);

  void __set_requestBytes(const int64_t val);

  bool operator == (const BlockWorkerClientService_requestSpace_args & rhs) const
  {
    if (!(sessionId == rhs.sessionId))
      return false;
    if (!(blockId == rhs.blockId))
      return false;
    if (!(requestBytes == rhs.requestBytes))
      return false;
    return true;
  }
  bool operator != (const BlockWorkerClientService_requestSpace_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BlockWorkerClientService_requestSpace_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BlockWorkerClientService_requestSpace_pargs {
 public:


  virtual ~BlockWorkerClientService_requestSpace_pargs() throw();
  const int64_t* sessionId;
  const int64_t* blockId;
  const int64_t* requestBytes;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BlockWorkerClientService_requestSpace_result__isset {
  _BlockWorkerClientService_requestSpace_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _BlockWorkerClientService_requestSpace_result__isset;

class BlockWorkerClientService_requestSpace_result {
 public:

  BlockWorkerClientService_requestSpace_result(const BlockWorkerClientService_requestSpace_result&);
  BlockWorkerClientService_requestSpace_result& operator=(const BlockWorkerClientService_requestSpace_result&);
  BlockWorkerClientService_requestSpace_result() : success(0) {
  }

  virtual ~BlockWorkerClientService_requestSpace_result() throw();
  bool success;
   ::AlluxioTException e;

  _BlockWorkerClientService_requestSpace_result__isset __isset;

  void __set_success(const bool val);

  void __set_e(const  ::AlluxioTException& val);

  bool operator == (const BlockWorkerClientService_requestSpace_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const BlockWorkerClientService_requestSpace_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BlockWorkerClientService_requestSpace_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BlockWorkerClientService_requestSpace_presult__isset {
  _BlockWorkerClientService_requestSpace_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _BlockWorkerClientService_requestSpace_presult__isset;

class BlockWorkerClientService_requestSpace_presult {
 public:


  virtual ~BlockWorkerClientService_requestSpace_presult() throw();
  bool* success;
   ::AlluxioTException e;

  _BlockWorkerClientService_requestSpace_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BlockWorkerClientService_sessionHeartbeat_args__isset {
  _BlockWorkerClientService_sessionHeartbeat_args__isset() : sessionId(false), metrics(false) {}
  bool sessionId :1;
  bool metrics :1;
} _BlockWorkerClientService_sessionHeartbeat_args__isset;

class BlockWorkerClientService_sessionHeartbeat_args {
 public:

  BlockWorkerClientService_sessionHeartbeat_args(const BlockWorkerClientService_sessionHeartbeat_args&);
  BlockWorkerClientService_sessionHeartbeat_args& operator=(const BlockWorkerClientService_sessionHeartbeat_args&);
  BlockWorkerClientService_sessionHeartbeat_args() : sessionId(0) {
  }

  virtual ~BlockWorkerClientService_sessionHeartbeat_args() throw();
  int64_t sessionId;
  std::vector<int64_t>  metrics;

  _BlockWorkerClientService_sessionHeartbeat_args__isset __isset;

  void __set_sessionId(const int64_t val);

  void __set_metrics(const std::vector<int64_t> & val);

  bool operator == (const BlockWorkerClientService_sessionHeartbeat_args & rhs) const
  {
    if (!(sessionId == rhs.sessionId))
      return false;
    if (!(metrics == rhs.metrics))
      return false;
    return true;
  }
  bool operator != (const BlockWorkerClientService_sessionHeartbeat_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BlockWorkerClientService_sessionHeartbeat_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BlockWorkerClientService_sessionHeartbeat_pargs {
 public:


  virtual ~BlockWorkerClientService_sessionHeartbeat_pargs() throw();
  const int64_t* sessionId;
  const std::vector<int64_t> * metrics;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BlockWorkerClientService_sessionHeartbeat_result__isset {
  _BlockWorkerClientService_sessionHeartbeat_result__isset() : e(false) {}
  bool e :1;
} _BlockWorkerClientService_sessionHeartbeat_result__isset;

class BlockWorkerClientService_sessionHeartbeat_result {
 public:

  BlockWorkerClientService_sessionHeartbeat_result(const BlockWorkerClientService_sessionHeartbeat_result&);
  BlockWorkerClientService_sessionHeartbeat_result& operator=(const BlockWorkerClientService_sessionHeartbeat_result&);
  BlockWorkerClientService_sessionHeartbeat_result() {
  }

  virtual ~BlockWorkerClientService_sessionHeartbeat_result() throw();
   ::AlluxioTException e;

  _BlockWorkerClientService_sessionHeartbeat_result__isset __isset;

  void __set_e(const  ::AlluxioTException& val);

  bool operator == (const BlockWorkerClientService_sessionHeartbeat_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const BlockWorkerClientService_sessionHeartbeat_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BlockWorkerClientService_sessionHeartbeat_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BlockWorkerClientService_sessionHeartbeat_presult__isset {
  _BlockWorkerClientService_sessionHeartbeat_presult__isset() : e(false) {}
  bool e :1;
} _BlockWorkerClientService_sessionHeartbeat_presult__isset;

class BlockWorkerClientService_sessionHeartbeat_presult {
 public:


  virtual ~BlockWorkerClientService_sessionHeartbeat_presult() throw();
   ::AlluxioTException e;

  _BlockWorkerClientService_sessionHeartbeat_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BlockWorkerClientService_unlockBlock_args__isset {
  _BlockWorkerClientService_unlockBlock_args__isset() : blockId(false), sessionId(false) {}
  bool blockId :1;
  bool sessionId :1;
} _BlockWorkerClientService_unlockBlock_args__isset;

class BlockWorkerClientService_unlockBlock_args {
 public:

  BlockWorkerClientService_unlockBlock_args(const BlockWorkerClientService_unlockBlock_args&);
  BlockWorkerClientService_unlockBlock_args& operator=(const BlockWorkerClientService_unlockBlock_args&);
  BlockWorkerClientService_unlockBlock_args() : blockId(0), sessionId(0) {
  }

  virtual ~BlockWorkerClientService_unlockBlock_args() throw();
  int64_t blockId;
  int64_t sessionId;

  _BlockWorkerClientService_unlockBlock_args__isset __isset;

  void __set_blockId(const int64_t val);

  void __set_sessionId(const int64_t val);

  bool operator == (const BlockWorkerClientService_unlockBlock_args & rhs) const
  {
    if (!(blockId == rhs.blockId))
      return false;
    if (!(sessionId == rhs.sessionId))
      return false;
    return true;
  }
  bool operator != (const BlockWorkerClientService_unlockBlock_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BlockWorkerClientService_unlockBlock_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BlockWorkerClientService_unlockBlock_pargs {
 public:


  virtual ~BlockWorkerClientService_unlockBlock_pargs() throw();
  const int64_t* blockId;
  const int64_t* sessionId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BlockWorkerClientService_unlockBlock_result__isset {
  _BlockWorkerClientService_unlockBlock_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _BlockWorkerClientService_unlockBlock_result__isset;

class BlockWorkerClientService_unlockBlock_result {
 public:

  BlockWorkerClientService_unlockBlock_result(const BlockWorkerClientService_unlockBlock_result&);
  BlockWorkerClientService_unlockBlock_result& operator=(const BlockWorkerClientService_unlockBlock_result&);
  BlockWorkerClientService_unlockBlock_result() : success(0) {
  }

  virtual ~BlockWorkerClientService_unlockBlock_result() throw();
  bool success;
   ::AlluxioTException e;

  _BlockWorkerClientService_unlockBlock_result__isset __isset;

  void __set_success(const bool val);

  void __set_e(const  ::AlluxioTException& val);

  bool operator == (const BlockWorkerClientService_unlockBlock_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const BlockWorkerClientService_unlockBlock_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BlockWorkerClientService_unlockBlock_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BlockWorkerClientService_unlockBlock_presult__isset {
  _BlockWorkerClientService_unlockBlock_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _BlockWorkerClientService_unlockBlock_presult__isset;

class BlockWorkerClientService_unlockBlock_presult {
 public:


  virtual ~BlockWorkerClientService_unlockBlock_presult() throw();
  bool* success;
   ::AlluxioTException e;

  _BlockWorkerClientService_unlockBlock_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class BlockWorkerClientServiceClient : virtual public BlockWorkerClientServiceIf, public  ::AlluxioServiceClient {
 public:
  BlockWorkerClientServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
     ::AlluxioServiceClient(prot, prot) {}
  BlockWorkerClientServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :     ::AlluxioServiceClient(iprot, oprot) {}
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void accessBlock(const int64_t blockId);
  void send_accessBlock(const int64_t blockId);
  void recv_accessBlock();
  void cacheBlock(const int64_t sessionId, const int64_t blockId);
  void send_cacheBlock(const int64_t sessionId, const int64_t blockId);
  void recv_cacheBlock();
  void cancelBlock(const int64_t sessionId, const int64_t blockId);
  void send_cancelBlock(const int64_t sessionId, const int64_t blockId);
  void recv_cancelBlock();
  void lockBlock(LockBlockResult& _return, const int64_t blockId, const int64_t sessionId);
  void send_lockBlock(const int64_t blockId, const int64_t sessionId);
  void recv_lockBlock(LockBlockResult& _return);
  bool promoteBlock(const int64_t blockId);
  void send_promoteBlock(const int64_t blockId);
  bool recv_promoteBlock();
  void removeBlock(const int64_t blockId);
  void send_removeBlock(const int64_t blockId);
  void recv_removeBlock();
  void requestBlockLocation(std::string& _return, const int64_t sessionId, const int64_t blockId, const int64_t initialBytes, const int32_t writeTier);
  void send_requestBlockLocation(const int64_t sessionId, const int64_t blockId, const int64_t initialBytes, const int32_t writeTier);
  void recv_requestBlockLocation(std::string& _return);
  bool requestSpace(const int64_t sessionId, const int64_t blockId, const int64_t requestBytes);
  void send_requestSpace(const int64_t sessionId, const int64_t blockId, const int64_t requestBytes);
  bool recv_requestSpace();
  void sessionHeartbeat(const int64_t sessionId, const std::vector<int64_t> & metrics);
  void send_sessionHeartbeat(const int64_t sessionId, const std::vector<int64_t> & metrics);
  void recv_sessionHeartbeat();
  bool unlockBlock(const int64_t blockId, const int64_t sessionId);
  void send_unlockBlock(const int64_t blockId, const int64_t sessionId);
  bool recv_unlockBlock();
};

class BlockWorkerClientServiceProcessor : public  ::AlluxioServiceProcessor {
 protected:
  boost::shared_ptr<BlockWorkerClientServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (BlockWorkerClientServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_accessBlock(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_cacheBlock(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_cancelBlock(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_lockBlock(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_promoteBlock(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_removeBlock(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_requestBlockLocation(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_requestSpace(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sessionHeartbeat(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_unlockBlock(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  BlockWorkerClientServiceProcessor(boost::shared_ptr<BlockWorkerClientServiceIf> iface) :
     ::AlluxioServiceProcessor(iface),
    iface_(iface) {
    processMap_["accessBlock"] = &BlockWorkerClientServiceProcessor::process_accessBlock;
    processMap_["cacheBlock"] = &BlockWorkerClientServiceProcessor::process_cacheBlock;
    processMap_["cancelBlock"] = &BlockWorkerClientServiceProcessor::process_cancelBlock;
    processMap_["lockBlock"] = &BlockWorkerClientServiceProcessor::process_lockBlock;
    processMap_["promoteBlock"] = &BlockWorkerClientServiceProcessor::process_promoteBlock;
    processMap_["removeBlock"] = &BlockWorkerClientServiceProcessor::process_removeBlock;
    processMap_["requestBlockLocation"] = &BlockWorkerClientServiceProcessor::process_requestBlockLocation;
    processMap_["requestSpace"] = &BlockWorkerClientServiceProcessor::process_requestSpace;
    processMap_["sessionHeartbeat"] = &BlockWorkerClientServiceProcessor::process_sessionHeartbeat;
    processMap_["unlockBlock"] = &BlockWorkerClientServiceProcessor::process_unlockBlock;
  }

  virtual ~BlockWorkerClientServiceProcessor() {}
};

class BlockWorkerClientServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  BlockWorkerClientServiceProcessorFactory(const ::boost::shared_ptr< BlockWorkerClientServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< BlockWorkerClientServiceIfFactory > handlerFactory_;
};

class BlockWorkerClientServiceMultiface : virtual public BlockWorkerClientServiceIf, public  ::AlluxioServiceMultiface {
 public:
  BlockWorkerClientServiceMultiface(std::vector<boost::shared_ptr<BlockWorkerClientServiceIf> >& ifaces) : ifaces_(ifaces) {
    std::vector<boost::shared_ptr<BlockWorkerClientServiceIf> >::iterator iter;
    for (iter = ifaces.begin(); iter != ifaces.end(); ++iter) {
       ::AlluxioServiceMultiface::add(*iter);
    }
  }
  virtual ~BlockWorkerClientServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<BlockWorkerClientServiceIf> > ifaces_;
  BlockWorkerClientServiceMultiface() {}
  void add(boost::shared_ptr<BlockWorkerClientServiceIf> iface) {
     ::AlluxioServiceMultiface::add(iface);
    ifaces_.push_back(iface);
  }
 public:
  void accessBlock(const int64_t blockId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->accessBlock(blockId);
    }
    ifaces_[i]->accessBlock(blockId);
  }

  void cacheBlock(const int64_t sessionId, const int64_t blockId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->cacheBlock(sessionId, blockId);
    }
    ifaces_[i]->cacheBlock(sessionId, blockId);
  }

  void cancelBlock(const int64_t sessionId, const int64_t blockId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->cancelBlock(sessionId, blockId);
    }
    ifaces_[i]->cancelBlock(sessionId, blockId);
  }

  void lockBlock(LockBlockResult& _return, const int64_t blockId, const int64_t sessionId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->lockBlock(_return, blockId, sessionId);
    }
    ifaces_[i]->lockBlock(_return, blockId, sessionId);
    return;
  }

  bool promoteBlock(const int64_t blockId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->promoteBlock(blockId);
    }
    return ifaces_[i]->promoteBlock(blockId);
  }

  void removeBlock(const int64_t blockId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->removeBlock(blockId);
    }
    ifaces_[i]->removeBlock(blockId);
  }

  void requestBlockLocation(std::string& _return, const int64_t sessionId, const int64_t blockId, const int64_t initialBytes, const int32_t writeTier) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->requestBlockLocation(_return, sessionId, blockId, initialBytes, writeTier);
    }
    ifaces_[i]->requestBlockLocation(_return, sessionId, blockId, initialBytes, writeTier);
    return;
  }

  bool requestSpace(const int64_t sessionId, const int64_t blockId, const int64_t requestBytes) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->requestSpace(sessionId, blockId, requestBytes);
    }
    return ifaces_[i]->requestSpace(sessionId, blockId, requestBytes);
  }

  void sessionHeartbeat(const int64_t sessionId, const std::vector<int64_t> & metrics) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sessionHeartbeat(sessionId, metrics);
    }
    ifaces_[i]->sessionHeartbeat(sessionId, metrics);
  }

  bool unlockBlock(const int64_t blockId, const int64_t sessionId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->unlockBlock(blockId, sessionId);
    }
    return ifaces_[i]->unlockBlock(blockId, sessionId);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class BlockWorkerClientServiceConcurrentClient : virtual public BlockWorkerClientServiceIf, public  ::AlluxioServiceConcurrentClient {
 public:
  BlockWorkerClientServiceConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
     ::AlluxioServiceConcurrentClient(prot, prot) {}
  BlockWorkerClientServiceConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :     ::AlluxioServiceConcurrentClient(iprot, oprot) {}
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void accessBlock(const int64_t blockId);
  int32_t send_accessBlock(const int64_t blockId);
  void recv_accessBlock(const int32_t seqid);
  void cacheBlock(const int64_t sessionId, const int64_t blockId);
  int32_t send_cacheBlock(const int64_t sessionId, const int64_t blockId);
  void recv_cacheBlock(const int32_t seqid);
  void cancelBlock(const int64_t sessionId, const int64_t blockId);
  int32_t send_cancelBlock(const int64_t sessionId, const int64_t blockId);
  void recv_cancelBlock(const int32_t seqid);
  void lockBlock(LockBlockResult& _return, const int64_t blockId, const int64_t sessionId);
  int32_t send_lockBlock(const int64_t blockId, const int64_t sessionId);
  void recv_lockBlock(LockBlockResult& _return, const int32_t seqid);
  bool promoteBlock(const int64_t blockId);
  int32_t send_promoteBlock(const int64_t blockId);
  bool recv_promoteBlock(const int32_t seqid);
  void removeBlock(const int64_t blockId);
  int32_t send_removeBlock(const int64_t blockId);
  void recv_removeBlock(const int32_t seqid);
  void requestBlockLocation(std::string& _return, const int64_t sessionId, const int64_t blockId, const int64_t initialBytes, const int32_t writeTier);
  int32_t send_requestBlockLocation(const int64_t sessionId, const int64_t blockId, const int64_t initialBytes, const int32_t writeTier);
  void recv_requestBlockLocation(std::string& _return, const int32_t seqid);
  bool requestSpace(const int64_t sessionId, const int64_t blockId, const int64_t requestBytes);
  int32_t send_requestSpace(const int64_t sessionId, const int64_t blockId, const int64_t requestBytes);
  bool recv_requestSpace(const int32_t seqid);
  void sessionHeartbeat(const int64_t sessionId, const std::vector<int64_t> & metrics);
  int32_t send_sessionHeartbeat(const int64_t sessionId, const std::vector<int64_t> & metrics);
  void recv_sessionHeartbeat(const int32_t seqid);
  bool unlockBlock(const int64_t blockId, const int64_t sessionId);
  int32_t send_unlockBlock(const int64_t blockId, const int64_t sessionId);
  bool recv_unlockBlock(const int32_t seqid);
};

#ifdef _WIN32
  #pragma warning( pop )
#endif



#endif
