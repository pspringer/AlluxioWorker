/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef block_worker_TYPES_H
#define block_worker_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>
#include "common_types.h"
#include "exception_types.h"




class LockBlockResult;

typedef struct _LockBlockResult__isset {
  _LockBlockResult__isset() : lockId(false), blockPath(false) {}
  bool lockId :1;
  bool blockPath :1;
} _LockBlockResult__isset;

class LockBlockResult : public virtual ::apache::thrift::TBase {
 public:

  LockBlockResult(const LockBlockResult&);
  LockBlockResult& operator=(const LockBlockResult&);
  LockBlockResult() : lockId(0), blockPath() {
  }

  virtual ~LockBlockResult() throw();
  int64_t lockId;
  std::string blockPath;

  _LockBlockResult__isset __isset;

  void __set_lockId(const int64_t val);

  void __set_blockPath(const std::string& val);

  bool operator == (const LockBlockResult & rhs) const
  {
    if (!(lockId == rhs.lockId))
      return false;
    if (!(blockPath == rhs.blockPath))
      return false;
    return true;
  }
  bool operator != (const LockBlockResult &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LockBlockResult & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(LockBlockResult &a, LockBlockResult &b);

inline std::ostream& operator<<(std::ostream& out, const LockBlockResult& obj)
{
  obj.printTo(out);
  return out;
}



#endif
