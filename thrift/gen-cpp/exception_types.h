/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef exception_TYPES_H
#define exception_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>




class AlluxioTException;

class ThriftIOException;

typedef struct _AlluxioTException__isset {
  _AlluxioTException__isset() : type(false), message(false), className(false) {}
  bool type :1;
  bool message :1;
  bool className :1;
} _AlluxioTException__isset;

class AlluxioTException : public ::apache::thrift::TException {
 public:

  AlluxioTException(const AlluxioTException&);
  AlluxioTException& operator=(const AlluxioTException&);
  AlluxioTException() : type(), message(), className() {
  }

  virtual ~AlluxioTException() throw();
  std::string type;
  std::string message;
  std::string className;

  _AlluxioTException__isset __isset;

  void __set_type(const std::string& val);

  void __set_message(const std::string& val);

  void __set_className(const std::string& val);

  bool operator == (const AlluxioTException & rhs) const
  {
    if (!(type == rhs.type))
      return false;
    if (!(message == rhs.message))
      return false;
    if (!(className == rhs.className))
      return false;
    return true;
  }
  bool operator != (const AlluxioTException &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AlluxioTException & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
  mutable std::string thriftTExceptionMessageHolder_;
  const char* what() const throw();
};

void swap(AlluxioTException &a, AlluxioTException &b);

inline std::ostream& operator<<(std::ostream& out, const AlluxioTException& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _ThriftIOException__isset {
  _ThriftIOException__isset() : message(false) {}
  bool message :1;
} _ThriftIOException__isset;

class ThriftIOException : public ::apache::thrift::TException {
 public:

  ThriftIOException(const ThriftIOException&);
  ThriftIOException& operator=(const ThriftIOException&);
  ThriftIOException() : message() {
  }

  virtual ~ThriftIOException() throw();
  std::string message;

  _ThriftIOException__isset __isset;

  void __set_message(const std::string& val);

  bool operator == (const ThriftIOException & rhs) const
  {
    if (!(message == rhs.message))
      return false;
    return true;
  }
  bool operator != (const ThriftIOException &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftIOException & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
  mutable std::string thriftTExceptionMessageHolder_;
  const char* what() const throw();
};

void swap(ThriftIOException &a, ThriftIOException &b);

inline std::ostream& operator<<(std::ostream& out, const ThriftIOException& obj)
{
  obj.printTo(out);
  return out;
}



#endif
