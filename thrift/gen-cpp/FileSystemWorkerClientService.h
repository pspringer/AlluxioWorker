/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef FileSystemWorkerClientService_H
#define FileSystemWorkerClientService_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "file_system_worker_types.h"
#include "AlluxioService.h"



#ifdef _WIN32
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class FileSystemWorkerClientServiceIf : virtual public  ::AlluxioServiceIf {
 public:
  virtual ~FileSystemWorkerClientServiceIf() {}

  /**
   * Cancels a file which has not been completed in the under file system.
   * 
   * @param sessionId the id of the current session
   * 
   * @param tempUfsFileId the worker specific file id of the ufs file
   * 
   * @param options the options for canceling the file
   */
  virtual void cancelUfsFile(const int64_t sessionId, const int64_t tempUfsFileId, const CancelUfsFileTOptions& options) = 0;

  /**
   * Closes a file in the under file system which was previously opened for reading.
   * 
   * 
   * @param sessionId the id of the current session
   * 
   * @param tempUfsFileId the worker specific file id of the ufs file
   * 
   * @param options the options for closing the file
   */
  virtual void closeUfsFile(const int64_t sessionId, const int64_t tempUfsFileId, const CloseUfsFileTOptions& options) = 0;

  /**
   * Completes a file in the under file system.
   * 
   * @param sessionId the id of the current session
   * 
   * @param tempUfsFileId the worker specific file id of the ufs file
   * 
   * @param options the options for completing the file
   */
  virtual int64_t completeUfsFile(const int64_t sessionId, const int64_t tempUfsFileId, const CompleteUfsFileTOptions& options) = 0;

  /**
   * Creates a file in the under file system.
   * 
   * @param sessionId the id of the current session
   * 
   * @param ufsPath the path of the file in the ufs
   * 
   * @param options the options for creating the file
   */
  virtual int64_t createUfsFile(const int64_t sessionId, const std::string& ufsPath, const CreateUfsFileTOptions& options) = 0;

  /**
   * Opens an existing file in the under file system for reading.
   * 
   * @param sessionId the id of the current session
   * 
   * @param ufsPath the path of the file in the ufs
   * 
   * @param options the options for opening the file
   */
  virtual int64_t openUfsFile(const int64_t sessionId, const std::string& ufsPath, const OpenUfsFileTOptions& options) = 0;

  /**
   * Local session send heartbeat to local worker to keep its state.
   * 
   * @param sessionId the id of the current session
   * 
   * @param metrics the client metrics. deprecated since 1.3.0 and will be removed in 2.0
   */
  virtual void sessionHeartbeat(const int64_t sessionId, const std::vector<int64_t> & metrics) = 0;
};

class FileSystemWorkerClientServiceIfFactory : virtual public  ::AlluxioServiceIfFactory {
 public:
  typedef FileSystemWorkerClientServiceIf Handler;

  virtual ~FileSystemWorkerClientServiceIfFactory() {}

  virtual FileSystemWorkerClientServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler( ::AlluxioServiceIf* /* handler */) = 0;
};

class FileSystemWorkerClientServiceIfSingletonFactory : virtual public FileSystemWorkerClientServiceIfFactory {
 public:
  FileSystemWorkerClientServiceIfSingletonFactory(const boost::shared_ptr<FileSystemWorkerClientServiceIf>& iface) : iface_(iface) {}
  virtual ~FileSystemWorkerClientServiceIfSingletonFactory() {}

  virtual FileSystemWorkerClientServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler( ::AlluxioServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<FileSystemWorkerClientServiceIf> iface_;
};

class FileSystemWorkerClientServiceNull : virtual public FileSystemWorkerClientServiceIf , virtual public  ::AlluxioServiceNull {
 public:
  virtual ~FileSystemWorkerClientServiceNull() {}
  void cancelUfsFile(const int64_t /* sessionId */, const int64_t /* tempUfsFileId */, const CancelUfsFileTOptions& /* options */) {
    return;
  }
  void closeUfsFile(const int64_t /* sessionId */, const int64_t /* tempUfsFileId */, const CloseUfsFileTOptions& /* options */) {
    return;
  }
  int64_t completeUfsFile(const int64_t /* sessionId */, const int64_t /* tempUfsFileId */, const CompleteUfsFileTOptions& /* options */) {
    int64_t _return = 0;
    return _return;
  }
  int64_t createUfsFile(const int64_t /* sessionId */, const std::string& /* ufsPath */, const CreateUfsFileTOptions& /* options */) {
    int64_t _return = 0;
    return _return;
  }
  int64_t openUfsFile(const int64_t /* sessionId */, const std::string& /* ufsPath */, const OpenUfsFileTOptions& /* options */) {
    int64_t _return = 0;
    return _return;
  }
  void sessionHeartbeat(const int64_t /* sessionId */, const std::vector<int64_t> & /* metrics */) {
    return;
  }
};

typedef struct _FileSystemWorkerClientService_cancelUfsFile_args__isset {
  _FileSystemWorkerClientService_cancelUfsFile_args__isset() : sessionId(false), tempUfsFileId(false), options(false) {}
  bool sessionId :1;
  bool tempUfsFileId :1;
  bool options :1;
} _FileSystemWorkerClientService_cancelUfsFile_args__isset;

class FileSystemWorkerClientService_cancelUfsFile_args {
 public:

  FileSystemWorkerClientService_cancelUfsFile_args(const FileSystemWorkerClientService_cancelUfsFile_args&);
  FileSystemWorkerClientService_cancelUfsFile_args& operator=(const FileSystemWorkerClientService_cancelUfsFile_args&);
  FileSystemWorkerClientService_cancelUfsFile_args() : sessionId(0), tempUfsFileId(0) {
  }

  virtual ~FileSystemWorkerClientService_cancelUfsFile_args() throw();
  int64_t sessionId;
  int64_t tempUfsFileId;
  CancelUfsFileTOptions options;

  _FileSystemWorkerClientService_cancelUfsFile_args__isset __isset;

  void __set_sessionId(const int64_t val);

  void __set_tempUfsFileId(const int64_t val);

  void __set_options(const CancelUfsFileTOptions& val);

  bool operator == (const FileSystemWorkerClientService_cancelUfsFile_args & rhs) const
  {
    if (!(sessionId == rhs.sessionId))
      return false;
    if (!(tempUfsFileId == rhs.tempUfsFileId))
      return false;
    if (!(options == rhs.options))
      return false;
    return true;
  }
  bool operator != (const FileSystemWorkerClientService_cancelUfsFile_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FileSystemWorkerClientService_cancelUfsFile_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class FileSystemWorkerClientService_cancelUfsFile_pargs {
 public:


  virtual ~FileSystemWorkerClientService_cancelUfsFile_pargs() throw();
  const int64_t* sessionId;
  const int64_t* tempUfsFileId;
  const CancelUfsFileTOptions* options;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FileSystemWorkerClientService_cancelUfsFile_result__isset {
  _FileSystemWorkerClientService_cancelUfsFile_result__isset() : e(false), ioe(false) {}
  bool e :1;
  bool ioe :1;
} _FileSystemWorkerClientService_cancelUfsFile_result__isset;

class FileSystemWorkerClientService_cancelUfsFile_result {
 public:

  FileSystemWorkerClientService_cancelUfsFile_result(const FileSystemWorkerClientService_cancelUfsFile_result&);
  FileSystemWorkerClientService_cancelUfsFile_result& operator=(const FileSystemWorkerClientService_cancelUfsFile_result&);
  FileSystemWorkerClientService_cancelUfsFile_result() {
  }

  virtual ~FileSystemWorkerClientService_cancelUfsFile_result() throw();
   ::AlluxioTException e;
   ::ThriftIOException ioe;

  _FileSystemWorkerClientService_cancelUfsFile_result__isset __isset;

  void __set_e(const  ::AlluxioTException& val);

  void __set_ioe(const  ::ThriftIOException& val);

  bool operator == (const FileSystemWorkerClientService_cancelUfsFile_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    if (!(ioe == rhs.ioe))
      return false;
    return true;
  }
  bool operator != (const FileSystemWorkerClientService_cancelUfsFile_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FileSystemWorkerClientService_cancelUfsFile_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FileSystemWorkerClientService_cancelUfsFile_presult__isset {
  _FileSystemWorkerClientService_cancelUfsFile_presult__isset() : e(false), ioe(false) {}
  bool e :1;
  bool ioe :1;
} _FileSystemWorkerClientService_cancelUfsFile_presult__isset;

class FileSystemWorkerClientService_cancelUfsFile_presult {
 public:


  virtual ~FileSystemWorkerClientService_cancelUfsFile_presult() throw();
   ::AlluxioTException e;
   ::ThriftIOException ioe;

  _FileSystemWorkerClientService_cancelUfsFile_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _FileSystemWorkerClientService_closeUfsFile_args__isset {
  _FileSystemWorkerClientService_closeUfsFile_args__isset() : sessionId(false), tempUfsFileId(false), options(false) {}
  bool sessionId :1;
  bool tempUfsFileId :1;
  bool options :1;
} _FileSystemWorkerClientService_closeUfsFile_args__isset;

class FileSystemWorkerClientService_closeUfsFile_args {
 public:

  FileSystemWorkerClientService_closeUfsFile_args(const FileSystemWorkerClientService_closeUfsFile_args&);
  FileSystemWorkerClientService_closeUfsFile_args& operator=(const FileSystemWorkerClientService_closeUfsFile_args&);
  FileSystemWorkerClientService_closeUfsFile_args() : sessionId(0), tempUfsFileId(0) {
  }

  virtual ~FileSystemWorkerClientService_closeUfsFile_args() throw();
  int64_t sessionId;
  int64_t tempUfsFileId;
  CloseUfsFileTOptions options;

  _FileSystemWorkerClientService_closeUfsFile_args__isset __isset;

  void __set_sessionId(const int64_t val);

  void __set_tempUfsFileId(const int64_t val);

  void __set_options(const CloseUfsFileTOptions& val);

  bool operator == (const FileSystemWorkerClientService_closeUfsFile_args & rhs) const
  {
    if (!(sessionId == rhs.sessionId))
      return false;
    if (!(tempUfsFileId == rhs.tempUfsFileId))
      return false;
    if (!(options == rhs.options))
      return false;
    return true;
  }
  bool operator != (const FileSystemWorkerClientService_closeUfsFile_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FileSystemWorkerClientService_closeUfsFile_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class FileSystemWorkerClientService_closeUfsFile_pargs {
 public:


  virtual ~FileSystemWorkerClientService_closeUfsFile_pargs() throw();
  const int64_t* sessionId;
  const int64_t* tempUfsFileId;
  const CloseUfsFileTOptions* options;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FileSystemWorkerClientService_closeUfsFile_result__isset {
  _FileSystemWorkerClientService_closeUfsFile_result__isset() : e(false), ioe(false) {}
  bool e :1;
  bool ioe :1;
} _FileSystemWorkerClientService_closeUfsFile_result__isset;

class FileSystemWorkerClientService_closeUfsFile_result {
 public:

  FileSystemWorkerClientService_closeUfsFile_result(const FileSystemWorkerClientService_closeUfsFile_result&);
  FileSystemWorkerClientService_closeUfsFile_result& operator=(const FileSystemWorkerClientService_closeUfsFile_result&);
  FileSystemWorkerClientService_closeUfsFile_result() {
  }

  virtual ~FileSystemWorkerClientService_closeUfsFile_result() throw();
   ::AlluxioTException e;
   ::ThriftIOException ioe;

  _FileSystemWorkerClientService_closeUfsFile_result__isset __isset;

  void __set_e(const  ::AlluxioTException& val);

  void __set_ioe(const  ::ThriftIOException& val);

  bool operator == (const FileSystemWorkerClientService_closeUfsFile_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    if (!(ioe == rhs.ioe))
      return false;
    return true;
  }
  bool operator != (const FileSystemWorkerClientService_closeUfsFile_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FileSystemWorkerClientService_closeUfsFile_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FileSystemWorkerClientService_closeUfsFile_presult__isset {
  _FileSystemWorkerClientService_closeUfsFile_presult__isset() : e(false), ioe(false) {}
  bool e :1;
  bool ioe :1;
} _FileSystemWorkerClientService_closeUfsFile_presult__isset;

class FileSystemWorkerClientService_closeUfsFile_presult {
 public:


  virtual ~FileSystemWorkerClientService_closeUfsFile_presult() throw();
   ::AlluxioTException e;
   ::ThriftIOException ioe;

  _FileSystemWorkerClientService_closeUfsFile_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _FileSystemWorkerClientService_completeUfsFile_args__isset {
  _FileSystemWorkerClientService_completeUfsFile_args__isset() : sessionId(false), tempUfsFileId(false), options(false) {}
  bool sessionId :1;
  bool tempUfsFileId :1;
  bool options :1;
} _FileSystemWorkerClientService_completeUfsFile_args__isset;

class FileSystemWorkerClientService_completeUfsFile_args {
 public:

  FileSystemWorkerClientService_completeUfsFile_args(const FileSystemWorkerClientService_completeUfsFile_args&);
  FileSystemWorkerClientService_completeUfsFile_args& operator=(const FileSystemWorkerClientService_completeUfsFile_args&);
  FileSystemWorkerClientService_completeUfsFile_args() : sessionId(0), tempUfsFileId(0) {
  }

  virtual ~FileSystemWorkerClientService_completeUfsFile_args() throw();
  int64_t sessionId;
  int64_t tempUfsFileId;
  CompleteUfsFileTOptions options;

  _FileSystemWorkerClientService_completeUfsFile_args__isset __isset;

  void __set_sessionId(const int64_t val);

  void __set_tempUfsFileId(const int64_t val);

  void __set_options(const CompleteUfsFileTOptions& val);

  bool operator == (const FileSystemWorkerClientService_completeUfsFile_args & rhs) const
  {
    if (!(sessionId == rhs.sessionId))
      return false;
    if (!(tempUfsFileId == rhs.tempUfsFileId))
      return false;
    if (!(options == rhs.options))
      return false;
    return true;
  }
  bool operator != (const FileSystemWorkerClientService_completeUfsFile_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FileSystemWorkerClientService_completeUfsFile_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class FileSystemWorkerClientService_completeUfsFile_pargs {
 public:


  virtual ~FileSystemWorkerClientService_completeUfsFile_pargs() throw();
  const int64_t* sessionId;
  const int64_t* tempUfsFileId;
  const CompleteUfsFileTOptions* options;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FileSystemWorkerClientService_completeUfsFile_result__isset {
  _FileSystemWorkerClientService_completeUfsFile_result__isset() : success(false), e(false), ioe(false) {}
  bool success :1;
  bool e :1;
  bool ioe :1;
} _FileSystemWorkerClientService_completeUfsFile_result__isset;

class FileSystemWorkerClientService_completeUfsFile_result {
 public:

  FileSystemWorkerClientService_completeUfsFile_result(const FileSystemWorkerClientService_completeUfsFile_result&);
  FileSystemWorkerClientService_completeUfsFile_result& operator=(const FileSystemWorkerClientService_completeUfsFile_result&);
  FileSystemWorkerClientService_completeUfsFile_result() : success(0) {
  }

  virtual ~FileSystemWorkerClientService_completeUfsFile_result() throw();
  int64_t success;
   ::AlluxioTException e;
   ::ThriftIOException ioe;

  _FileSystemWorkerClientService_completeUfsFile_result__isset __isset;

  void __set_success(const int64_t val);

  void __set_e(const  ::AlluxioTException& val);

  void __set_ioe(const  ::ThriftIOException& val);

  bool operator == (const FileSystemWorkerClientService_completeUfsFile_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    if (!(ioe == rhs.ioe))
      return false;
    return true;
  }
  bool operator != (const FileSystemWorkerClientService_completeUfsFile_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FileSystemWorkerClientService_completeUfsFile_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FileSystemWorkerClientService_completeUfsFile_presult__isset {
  _FileSystemWorkerClientService_completeUfsFile_presult__isset() : success(false), e(false), ioe(false) {}
  bool success :1;
  bool e :1;
  bool ioe :1;
} _FileSystemWorkerClientService_completeUfsFile_presult__isset;

class FileSystemWorkerClientService_completeUfsFile_presult {
 public:


  virtual ~FileSystemWorkerClientService_completeUfsFile_presult() throw();
  int64_t* success;
   ::AlluxioTException e;
   ::ThriftIOException ioe;

  _FileSystemWorkerClientService_completeUfsFile_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _FileSystemWorkerClientService_createUfsFile_args__isset {
  _FileSystemWorkerClientService_createUfsFile_args__isset() : sessionId(false), ufsPath(false), options(false) {}
  bool sessionId :1;
  bool ufsPath :1;
  bool options :1;
} _FileSystemWorkerClientService_createUfsFile_args__isset;

class FileSystemWorkerClientService_createUfsFile_args {
 public:

  FileSystemWorkerClientService_createUfsFile_args(const FileSystemWorkerClientService_createUfsFile_args&);
  FileSystemWorkerClientService_createUfsFile_args& operator=(const FileSystemWorkerClientService_createUfsFile_args&);
  FileSystemWorkerClientService_createUfsFile_args() : sessionId(0), ufsPath() {
  }

  virtual ~FileSystemWorkerClientService_createUfsFile_args() throw();
  int64_t sessionId;
  std::string ufsPath;
  CreateUfsFileTOptions options;

  _FileSystemWorkerClientService_createUfsFile_args__isset __isset;

  void __set_sessionId(const int64_t val);

  void __set_ufsPath(const std::string& val);

  void __set_options(const CreateUfsFileTOptions& val);

  bool operator == (const FileSystemWorkerClientService_createUfsFile_args & rhs) const
  {
    if (!(sessionId == rhs.sessionId))
      return false;
    if (!(ufsPath == rhs.ufsPath))
      return false;
    if (!(options == rhs.options))
      return false;
    return true;
  }
  bool operator != (const FileSystemWorkerClientService_createUfsFile_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FileSystemWorkerClientService_createUfsFile_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class FileSystemWorkerClientService_createUfsFile_pargs {
 public:


  virtual ~FileSystemWorkerClientService_createUfsFile_pargs() throw();
  const int64_t* sessionId;
  const std::string* ufsPath;
  const CreateUfsFileTOptions* options;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FileSystemWorkerClientService_createUfsFile_result__isset {
  _FileSystemWorkerClientService_createUfsFile_result__isset() : success(false), e(false), ioe(false) {}
  bool success :1;
  bool e :1;
  bool ioe :1;
} _FileSystemWorkerClientService_createUfsFile_result__isset;

class FileSystemWorkerClientService_createUfsFile_result {
 public:

  FileSystemWorkerClientService_createUfsFile_result(const FileSystemWorkerClientService_createUfsFile_result&);
  FileSystemWorkerClientService_createUfsFile_result& operator=(const FileSystemWorkerClientService_createUfsFile_result&);
  FileSystemWorkerClientService_createUfsFile_result() : success(0) {
  }

  virtual ~FileSystemWorkerClientService_createUfsFile_result() throw();
  int64_t success;
   ::AlluxioTException e;
   ::ThriftIOException ioe;

  _FileSystemWorkerClientService_createUfsFile_result__isset __isset;

  void __set_success(const int64_t val);

  void __set_e(const  ::AlluxioTException& val);

  void __set_ioe(const  ::ThriftIOException& val);

  bool operator == (const FileSystemWorkerClientService_createUfsFile_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    if (!(ioe == rhs.ioe))
      return false;
    return true;
  }
  bool operator != (const FileSystemWorkerClientService_createUfsFile_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FileSystemWorkerClientService_createUfsFile_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FileSystemWorkerClientService_createUfsFile_presult__isset {
  _FileSystemWorkerClientService_createUfsFile_presult__isset() : success(false), e(false), ioe(false) {}
  bool success :1;
  bool e :1;
  bool ioe :1;
} _FileSystemWorkerClientService_createUfsFile_presult__isset;

class FileSystemWorkerClientService_createUfsFile_presult {
 public:


  virtual ~FileSystemWorkerClientService_createUfsFile_presult() throw();
  int64_t* success;
   ::AlluxioTException e;
   ::ThriftIOException ioe;

  _FileSystemWorkerClientService_createUfsFile_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _FileSystemWorkerClientService_openUfsFile_args__isset {
  _FileSystemWorkerClientService_openUfsFile_args__isset() : sessionId(false), ufsPath(false), options(false) {}
  bool sessionId :1;
  bool ufsPath :1;
  bool options :1;
} _FileSystemWorkerClientService_openUfsFile_args__isset;

class FileSystemWorkerClientService_openUfsFile_args {
 public:

  FileSystemWorkerClientService_openUfsFile_args(const FileSystemWorkerClientService_openUfsFile_args&);
  FileSystemWorkerClientService_openUfsFile_args& operator=(const FileSystemWorkerClientService_openUfsFile_args&);
  FileSystemWorkerClientService_openUfsFile_args() : sessionId(0), ufsPath() {
  }

  virtual ~FileSystemWorkerClientService_openUfsFile_args() throw();
  int64_t sessionId;
  std::string ufsPath;
  OpenUfsFileTOptions options;

  _FileSystemWorkerClientService_openUfsFile_args__isset __isset;

  void __set_sessionId(const int64_t val);

  void __set_ufsPath(const std::string& val);

  void __set_options(const OpenUfsFileTOptions& val);

  bool operator == (const FileSystemWorkerClientService_openUfsFile_args & rhs) const
  {
    if (!(sessionId == rhs.sessionId))
      return false;
    if (!(ufsPath == rhs.ufsPath))
      return false;
    if (!(options == rhs.options))
      return false;
    return true;
  }
  bool operator != (const FileSystemWorkerClientService_openUfsFile_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FileSystemWorkerClientService_openUfsFile_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class FileSystemWorkerClientService_openUfsFile_pargs {
 public:


  virtual ~FileSystemWorkerClientService_openUfsFile_pargs() throw();
  const int64_t* sessionId;
  const std::string* ufsPath;
  const OpenUfsFileTOptions* options;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FileSystemWorkerClientService_openUfsFile_result__isset {
  _FileSystemWorkerClientService_openUfsFile_result__isset() : success(false), e(false), ioe(false) {}
  bool success :1;
  bool e :1;
  bool ioe :1;
} _FileSystemWorkerClientService_openUfsFile_result__isset;

class FileSystemWorkerClientService_openUfsFile_result {
 public:

  FileSystemWorkerClientService_openUfsFile_result(const FileSystemWorkerClientService_openUfsFile_result&);
  FileSystemWorkerClientService_openUfsFile_result& operator=(const FileSystemWorkerClientService_openUfsFile_result&);
  FileSystemWorkerClientService_openUfsFile_result() : success(0) {
  }

  virtual ~FileSystemWorkerClientService_openUfsFile_result() throw();
  int64_t success;
   ::AlluxioTException e;
   ::ThriftIOException ioe;

  _FileSystemWorkerClientService_openUfsFile_result__isset __isset;

  void __set_success(const int64_t val);

  void __set_e(const  ::AlluxioTException& val);

  void __set_ioe(const  ::ThriftIOException& val);

  bool operator == (const FileSystemWorkerClientService_openUfsFile_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    if (!(ioe == rhs.ioe))
      return false;
    return true;
  }
  bool operator != (const FileSystemWorkerClientService_openUfsFile_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FileSystemWorkerClientService_openUfsFile_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FileSystemWorkerClientService_openUfsFile_presult__isset {
  _FileSystemWorkerClientService_openUfsFile_presult__isset() : success(false), e(false), ioe(false) {}
  bool success :1;
  bool e :1;
  bool ioe :1;
} _FileSystemWorkerClientService_openUfsFile_presult__isset;

class FileSystemWorkerClientService_openUfsFile_presult {
 public:


  virtual ~FileSystemWorkerClientService_openUfsFile_presult() throw();
  int64_t* success;
   ::AlluxioTException e;
   ::ThriftIOException ioe;

  _FileSystemWorkerClientService_openUfsFile_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _FileSystemWorkerClientService_sessionHeartbeat_args__isset {
  _FileSystemWorkerClientService_sessionHeartbeat_args__isset() : sessionId(false), metrics(false) {}
  bool sessionId :1;
  bool metrics :1;
} _FileSystemWorkerClientService_sessionHeartbeat_args__isset;

class FileSystemWorkerClientService_sessionHeartbeat_args {
 public:

  FileSystemWorkerClientService_sessionHeartbeat_args(const FileSystemWorkerClientService_sessionHeartbeat_args&);
  FileSystemWorkerClientService_sessionHeartbeat_args& operator=(const FileSystemWorkerClientService_sessionHeartbeat_args&);
  FileSystemWorkerClientService_sessionHeartbeat_args() : sessionId(0) {
  }

  virtual ~FileSystemWorkerClientService_sessionHeartbeat_args() throw();
  int64_t sessionId;
  std::vector<int64_t>  metrics;

  _FileSystemWorkerClientService_sessionHeartbeat_args__isset __isset;

  void __set_sessionId(const int64_t val);

  void __set_metrics(const std::vector<int64_t> & val);

  bool operator == (const FileSystemWorkerClientService_sessionHeartbeat_args & rhs) const
  {
    if (!(sessionId == rhs.sessionId))
      return false;
    if (!(metrics == rhs.metrics))
      return false;
    return true;
  }
  bool operator != (const FileSystemWorkerClientService_sessionHeartbeat_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FileSystemWorkerClientService_sessionHeartbeat_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class FileSystemWorkerClientService_sessionHeartbeat_pargs {
 public:


  virtual ~FileSystemWorkerClientService_sessionHeartbeat_pargs() throw();
  const int64_t* sessionId;
  const std::vector<int64_t> * metrics;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FileSystemWorkerClientService_sessionHeartbeat_result__isset {
  _FileSystemWorkerClientService_sessionHeartbeat_result__isset() : e(false) {}
  bool e :1;
} _FileSystemWorkerClientService_sessionHeartbeat_result__isset;

class FileSystemWorkerClientService_sessionHeartbeat_result {
 public:

  FileSystemWorkerClientService_sessionHeartbeat_result(const FileSystemWorkerClientService_sessionHeartbeat_result&);
  FileSystemWorkerClientService_sessionHeartbeat_result& operator=(const FileSystemWorkerClientService_sessionHeartbeat_result&);
  FileSystemWorkerClientService_sessionHeartbeat_result() {
  }

  virtual ~FileSystemWorkerClientService_sessionHeartbeat_result() throw();
   ::AlluxioTException e;

  _FileSystemWorkerClientService_sessionHeartbeat_result__isset __isset;

  void __set_e(const  ::AlluxioTException& val);

  bool operator == (const FileSystemWorkerClientService_sessionHeartbeat_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const FileSystemWorkerClientService_sessionHeartbeat_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FileSystemWorkerClientService_sessionHeartbeat_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FileSystemWorkerClientService_sessionHeartbeat_presult__isset {
  _FileSystemWorkerClientService_sessionHeartbeat_presult__isset() : e(false) {}
  bool e :1;
} _FileSystemWorkerClientService_sessionHeartbeat_presult__isset;

class FileSystemWorkerClientService_sessionHeartbeat_presult {
 public:


  virtual ~FileSystemWorkerClientService_sessionHeartbeat_presult() throw();
   ::AlluxioTException e;

  _FileSystemWorkerClientService_sessionHeartbeat_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class FileSystemWorkerClientServiceClient : virtual public FileSystemWorkerClientServiceIf, public  ::AlluxioServiceClient {
 public:
  FileSystemWorkerClientServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
     ::AlluxioServiceClient(prot, prot) {}
  FileSystemWorkerClientServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :     ::AlluxioServiceClient(iprot, oprot) {}
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void cancelUfsFile(const int64_t sessionId, const int64_t tempUfsFileId, const CancelUfsFileTOptions& options);
  void send_cancelUfsFile(const int64_t sessionId, const int64_t tempUfsFileId, const CancelUfsFileTOptions& options);
  void recv_cancelUfsFile();
  void closeUfsFile(const int64_t sessionId, const int64_t tempUfsFileId, const CloseUfsFileTOptions& options);
  void send_closeUfsFile(const int64_t sessionId, const int64_t tempUfsFileId, const CloseUfsFileTOptions& options);
  void recv_closeUfsFile();
  int64_t completeUfsFile(const int64_t sessionId, const int64_t tempUfsFileId, const CompleteUfsFileTOptions& options);
  void send_completeUfsFile(const int64_t sessionId, const int64_t tempUfsFileId, const CompleteUfsFileTOptions& options);
  int64_t recv_completeUfsFile();
  int64_t createUfsFile(const int64_t sessionId, const std::string& ufsPath, const CreateUfsFileTOptions& options);
  void send_createUfsFile(const int64_t sessionId, const std::string& ufsPath, const CreateUfsFileTOptions& options);
  int64_t recv_createUfsFile();
  int64_t openUfsFile(const int64_t sessionId, const std::string& ufsPath, const OpenUfsFileTOptions& options);
  void send_openUfsFile(const int64_t sessionId, const std::string& ufsPath, const OpenUfsFileTOptions& options);
  int64_t recv_openUfsFile();
  void sessionHeartbeat(const int64_t sessionId, const std::vector<int64_t> & metrics);
  void send_sessionHeartbeat(const int64_t sessionId, const std::vector<int64_t> & metrics);
  void recv_sessionHeartbeat();
};

class FileSystemWorkerClientServiceProcessor : public  ::AlluxioServiceProcessor {
 protected:
  boost::shared_ptr<FileSystemWorkerClientServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (FileSystemWorkerClientServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_cancelUfsFile(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_closeUfsFile(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_completeUfsFile(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_createUfsFile(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_openUfsFile(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sessionHeartbeat(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  FileSystemWorkerClientServiceProcessor(boost::shared_ptr<FileSystemWorkerClientServiceIf> iface) :
     ::AlluxioServiceProcessor(iface),
    iface_(iface) {
    processMap_["cancelUfsFile"] = &FileSystemWorkerClientServiceProcessor::process_cancelUfsFile;
    processMap_["closeUfsFile"] = &FileSystemWorkerClientServiceProcessor::process_closeUfsFile;
    processMap_["completeUfsFile"] = &FileSystemWorkerClientServiceProcessor::process_completeUfsFile;
    processMap_["createUfsFile"] = &FileSystemWorkerClientServiceProcessor::process_createUfsFile;
    processMap_["openUfsFile"] = &FileSystemWorkerClientServiceProcessor::process_openUfsFile;
    processMap_["sessionHeartbeat"] = &FileSystemWorkerClientServiceProcessor::process_sessionHeartbeat;
  }

  virtual ~FileSystemWorkerClientServiceProcessor() {}
};

class FileSystemWorkerClientServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  FileSystemWorkerClientServiceProcessorFactory(const ::boost::shared_ptr< FileSystemWorkerClientServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< FileSystemWorkerClientServiceIfFactory > handlerFactory_;
};

class FileSystemWorkerClientServiceMultiface : virtual public FileSystemWorkerClientServiceIf, public  ::AlluxioServiceMultiface {
 public:
  FileSystemWorkerClientServiceMultiface(std::vector<boost::shared_ptr<FileSystemWorkerClientServiceIf> >& ifaces) : ifaces_(ifaces) {
    std::vector<boost::shared_ptr<FileSystemWorkerClientServiceIf> >::iterator iter;
    for (iter = ifaces.begin(); iter != ifaces.end(); ++iter) {
       ::AlluxioServiceMultiface::add(*iter);
    }
  }
  virtual ~FileSystemWorkerClientServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<FileSystemWorkerClientServiceIf> > ifaces_;
  FileSystemWorkerClientServiceMultiface() {}
  void add(boost::shared_ptr<FileSystemWorkerClientServiceIf> iface) {
     ::AlluxioServiceMultiface::add(iface);
    ifaces_.push_back(iface);
  }
 public:
  void cancelUfsFile(const int64_t sessionId, const int64_t tempUfsFileId, const CancelUfsFileTOptions& options) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->cancelUfsFile(sessionId, tempUfsFileId, options);
    }
    ifaces_[i]->cancelUfsFile(sessionId, tempUfsFileId, options);
  }

  void closeUfsFile(const int64_t sessionId, const int64_t tempUfsFileId, const CloseUfsFileTOptions& options) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->closeUfsFile(sessionId, tempUfsFileId, options);
    }
    ifaces_[i]->closeUfsFile(sessionId, tempUfsFileId, options);
  }

  int64_t completeUfsFile(const int64_t sessionId, const int64_t tempUfsFileId, const CompleteUfsFileTOptions& options) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->completeUfsFile(sessionId, tempUfsFileId, options);
    }
    return ifaces_[i]->completeUfsFile(sessionId, tempUfsFileId, options);
  }

  int64_t createUfsFile(const int64_t sessionId, const std::string& ufsPath, const CreateUfsFileTOptions& options) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->createUfsFile(sessionId, ufsPath, options);
    }
    return ifaces_[i]->createUfsFile(sessionId, ufsPath, options);
  }

  int64_t openUfsFile(const int64_t sessionId, const std::string& ufsPath, const OpenUfsFileTOptions& options) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->openUfsFile(sessionId, ufsPath, options);
    }
    return ifaces_[i]->openUfsFile(sessionId, ufsPath, options);
  }

  void sessionHeartbeat(const int64_t sessionId, const std::vector<int64_t> & metrics) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sessionHeartbeat(sessionId, metrics);
    }
    ifaces_[i]->sessionHeartbeat(sessionId, metrics);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class FileSystemWorkerClientServiceConcurrentClient : virtual public FileSystemWorkerClientServiceIf, public  ::AlluxioServiceConcurrentClient {
 public:
  FileSystemWorkerClientServiceConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
     ::AlluxioServiceConcurrentClient(prot, prot) {}
  FileSystemWorkerClientServiceConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :     ::AlluxioServiceConcurrentClient(iprot, oprot) {}
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void cancelUfsFile(const int64_t sessionId, const int64_t tempUfsFileId, const CancelUfsFileTOptions& options);
  int32_t send_cancelUfsFile(const int64_t sessionId, const int64_t tempUfsFileId, const CancelUfsFileTOptions& options);
  void recv_cancelUfsFile(const int32_t seqid);
  void closeUfsFile(const int64_t sessionId, const int64_t tempUfsFileId, const CloseUfsFileTOptions& options);
  int32_t send_closeUfsFile(const int64_t sessionId, const int64_t tempUfsFileId, const CloseUfsFileTOptions& options);
  void recv_closeUfsFile(const int32_t seqid);
  int64_t completeUfsFile(const int64_t sessionId, const int64_t tempUfsFileId, const CompleteUfsFileTOptions& options);
  int32_t send_completeUfsFile(const int64_t sessionId, const int64_t tempUfsFileId, const CompleteUfsFileTOptions& options);
  int64_t recv_completeUfsFile(const int32_t seqid);
  int64_t createUfsFile(const int64_t sessionId, const std::string& ufsPath, const CreateUfsFileTOptions& options);
  int32_t send_createUfsFile(const int64_t sessionId, const std::string& ufsPath, const CreateUfsFileTOptions& options);
  int64_t recv_createUfsFile(const int32_t seqid);
  int64_t openUfsFile(const int64_t sessionId, const std::string& ufsPath, const OpenUfsFileTOptions& options);
  int32_t send_openUfsFile(const int64_t sessionId, const std::string& ufsPath, const OpenUfsFileTOptions& options);
  int64_t recv_openUfsFile(const int32_t seqid);
  void sessionHeartbeat(const int64_t sessionId, const std::vector<int64_t> & metrics);
  int32_t send_sessionHeartbeat(const int64_t sessionId, const std::vector<int64_t> & metrics);
  void recv_sessionHeartbeat(const int32_t seqid);
};

#ifdef _WIN32
  #pragma warning( pop )
#endif



#endif
