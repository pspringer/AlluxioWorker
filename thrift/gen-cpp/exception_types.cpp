/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "exception_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>




AlluxioTException::~AlluxioTException() throw() {
}


void AlluxioTException::__set_type(const std::string& val) {
  this->type = val;
}

void AlluxioTException::__set_message(const std::string& val) {
  this->message = val;
}

void AlluxioTException::__set_className(const std::string& val) {
  this->className = val;
}

uint32_t AlluxioTException::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->type);
          this->__isset.type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->message);
          this->__isset.message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->className);
          this->__isset.className = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AlluxioTException::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("AlluxioTException");

  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("message", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->message);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("className", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->className);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(AlluxioTException &a, AlluxioTException &b) {
  using ::std::swap;
  swap(a.type, b.type);
  swap(a.message, b.message);
  swap(a.className, b.className);
  swap(a.__isset, b.__isset);
}

AlluxioTException::AlluxioTException(const AlluxioTException& other0) : TException() {
  type = other0.type;
  message = other0.message;
  className = other0.className;
  __isset = other0.__isset;
}
AlluxioTException& AlluxioTException::operator=(const AlluxioTException& other1) {
  type = other1.type;
  message = other1.message;
  className = other1.className;
  __isset = other1.__isset;
  return *this;
}
void AlluxioTException::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "AlluxioTException(";
  out << "type=" << to_string(type);
  out << ", " << "message=" << to_string(message);
  out << ", " << "className=" << to_string(className);
  out << ")";
}

const char* AlluxioTException::what() const throw() {
  try {
    std::stringstream ss;
    ss << "TException - service has thrown: " << *this;
    this->thriftTExceptionMessageHolder_ = ss.str();
    return this->thriftTExceptionMessageHolder_.c_str();
  } catch (const std::exception&) {
    return "TException - service has thrown: AlluxioTException";
  }
}


ThriftIOException::~ThriftIOException() throw() {
}


void ThriftIOException::__set_message(const std::string& val) {
  this->message = val;
}

uint32_t ThriftIOException::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->message);
          this->__isset.message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ThriftIOException::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ThriftIOException");

  xfer += oprot->writeFieldBegin("message", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->message);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ThriftIOException &a, ThriftIOException &b) {
  using ::std::swap;
  swap(a.message, b.message);
  swap(a.__isset, b.__isset);
}

ThriftIOException::ThriftIOException(const ThriftIOException& other2) : TException() {
  message = other2.message;
  __isset = other2.__isset;
}
ThriftIOException& ThriftIOException::operator=(const ThriftIOException& other3) {
  message = other3.message;
  __isset = other3.__isset;
  return *this;
}
void ThriftIOException::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ThriftIOException(";
  out << "message=" << to_string(message);
  out << ")";
}

const char* ThriftIOException::what() const throw() {
  try {
    std::stringstream ss;
    ss << "TException - service has thrown: " << *this;
    this->thriftTExceptionMessageHolder_ = ss.str();
    return this->thriftTExceptionMessageHolder_.c_str();
  } catch (const std::exception&) {
    return "TException - service has thrown: ThriftIOException";
  }
}


