// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "BlockMasterWorkerService.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

class BlockMasterWorkerServiceHandler : virtual public BlockMasterWorkerServiceIf {
 public:
  BlockMasterWorkerServiceHandler() {
    // Your initialization goes here
  }

  /**
   * Marks the given block as committed.
   * 
   * @param workerId the id of the worker
   * 
   * @param usedBytesOnTier the space used in bytes on the target tier
   * 
   * @param tierAlias the alias of the target tier
   * 
   * @param blockId the id of the block being committed
   * 
   * @param length the length of the block being committed
   */
  void commitBlock(const int64_t workerId, const int64_t usedBytesOnTier, const std::string& tierAlias, const int64_t blockId, const int64_t length) {
    // Your implementation goes here
    printf("commitBlock\n");
  }

  /**
   * Returns a worker id for the given network address.
   * 
   * @param workerNetAddress the worker network address
   */
  int64_t getWorkerId(const  ::WorkerNetAddress& workerNetAddress) {
    // Your implementation goes here
    printf("getWorkerId\n");
  }

  /**
   * Periodic worker heartbeat returns an optional command for the worker to execute.
   * 
   * @param workerId the id of the worker
   * 
   * @param usedBytesOnTiers the map of space used in bytes on all tiers
   * 
   * @param removedBlockIds the list of removed block ids
   * 
   * @param addedBlocksOnTiers the map of added blocks on all tiers
   */
  void heartbeat( ::Command& _return, const int64_t workerId, const std::map<std::string, int64_t> & usedBytesOnTiers, const std::vector<int64_t> & removedBlockIds, const std::map<std::string, std::vector<int64_t> > & addedBlocksOnTiers) {
    // Your implementation goes here
    printf("heartbeat\n");
  }

  /**
   * Registers a worker.
   * 
   * @param workerId the id of the worker
   * 
   * @param storageTiers the list of storage tiers
   * 
   * @param totalBytesOnTiers the map of total bytes on each tier
   * 
   * @param usedBytesOnTiers the map of used bytes on each tier
   * 
   * @param currentBlocksOnTiers the map of list of blocks on each tier
   */
  void registerWorker(const int64_t workerId, const std::vector<std::string> & storageTiers, const std::map<std::string, int64_t> & totalBytesOnTiers, const std::map<std::string, int64_t> & usedBytesOnTiers, const std::map<std::string, std::vector<int64_t> > & currentBlocksOnTiers) {
    // Your implementation goes here
    printf("registerWorker\n");
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  shared_ptr<BlockMasterWorkerServiceHandler> handler(new BlockMasterWorkerServiceHandler());
  shared_ptr<TProcessor> processor(new BlockMasterWorkerServiceProcessor(handler));
  shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

